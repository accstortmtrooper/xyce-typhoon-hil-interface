//
// Saved by sw version: 2020.1 SP1
// Save timestamp: 03-Jun-2020 @ 11:50:07 AM
//

library "xyce_lib" {
    configuration {
        hil_device = "HIL402"
        hil_configuration_id = 1
        simulation_method = exact
        simulation_time_step = auto
        simulation_discret_scaling = 1.0
        dsp_timer_periods = 100e-6, 50e-3
        ss_calc_method = "systematic elimination"
        enb_pole_shift = True
        enb_gds_oversampling = True
        show_modes = False
        device_ao_limit_enable = False
        cpl_stb = False
        enb_dep_sw_detect = False
        code_section = "internal memory"
        data_section = "internal memory"
        sys_sp_rate_1 = 0.0001
        sys_sp_rate_2 = 0.05
        sys_real_type_precision = "default"
        user_real_type_precision = "default"
        sys_cpu_optimization = "high"
        user_cpu_optimization = "high"
    }

    component Subsystem Root {
        component Category Switches {
            layout = dynamic
            component Subsystem "Current-Controlled Switch" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7904, 8064
                ]

                port n_node {
                    label = "-"
                    position = right center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                port p_node {
                    label = "+"
                    position = left center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                connect p_node "Short Circuit.p_node" as Connection1
                connect "Short Circuit.n_node" n_node as Connection2

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Current-Controlled Switch</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">In Xyce, this is an \"W\" type component.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">With an Active-High logic selected, the switch remains closed (is modeled as an R_on resistor) if the current on the selected controlling measurement is positive. When open, the switch is modeled as an R_off resistor.</p></body></html>"

                    r_on {
                        label = "ON Resistance"
                        widget = edit
                        type = generic
                        default_value = "1e-3"
                    }

                    r_off {
                        label = "OFF Resistance"
                        widget = edit
                        type = generic
                        default_value = "1e6"
                    }

                    logic {
                        label = "Logic"
                        widget = combo
                        combo_values = "Active High", "Active Low"
                        type = string
                        default_value = "Active High"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    ctrl_name {
                        label = "Controlling measurement name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    update_currents {
                        label = "Update current measurements"
                        widget = button
                        type = string
                        default_value = "Update"
                        no_evaluate

                        CODE button_clicked
                            update_current_measurements()
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/cc_switch_high.svg')
                        ctrl_name_prop = mdl.prop(item_handle, "ctrl_name")
                        ctrl_name = mdl.get_property_value(ctrl_name_prop)
                    
                        try:
                    
                            logic = mdl.prop(item_handle, "logic")
                    
                            if mdl.get_property_value(logic) == "Active Low":
                                if not ctrl_name == "None":
                                    mdl.set_component_icon_image(item_handle, 'Xyce/cc_switch_low_selectedcur.svg')
                                    mdl.set_color(item_handle, "blue")
                                    mdl.disp_component_icon_text(item_handle, " " + ctrl_name, relpos_x = 0.5, relpos_y = 0.87, size = 8)
                                else:
                                    mdl.set_component_icon_image(item_handle, 'Xyce/cc_switch_low.svg')
                            else:
                                if not ctrl_name == "None":
                                   mdl.set_component_icon_image(item_handle, 'Xyce/cc_switch_high_selectedcur.svg')
                                   mdl.set_color(item_handle, "blue")
                                   mdl.disp_component_icon_text(item_handle, " " + ctrl_name, relpos_x = 0.5, relpos_y = 0.87, size = 8)
                    
                        except: pass
                    ENDCODE

                    CODE init
                        def update_current_measurements():
                            i_list = []
                    
                            for item in mdl.get_items():
                                try: # Not every component has a type
                                    if mdl.get_component_type_name(item) == "Current Measurement":
                                        i_list.append(item.fqn.split(".")[0])
                                except AttributeError: pass
                    
                            for item in mdl.get_items():
                                try: # Not every component has a type
                                    if mdl.get_component_type_name(item) == "Current-Controlled Switch":
                                        ctrl_name_prop = mdl.prop(item, "ctrl_name")
                                        mdl.set_property_combo_values(ctrl_name_prop, i_list)
                                        displayed_ctrl = mdl.get_property_disp_value(ctrl_name_prop)
                                        if displayed_ctrl not in i_list:
                                            mdl.set_property_value(ctrl_name_prop, "None")
                                            mdl.refresh_icon(item)
                                except AttributeError: pass
                    
                        update_current_measurements()
                    ENDCODE
                }
            }
            [
                position = 7616, 7944
                size = 64, 64
            ]

            component Subsystem "Voltage-Controlled Switch" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7904, 8064
                ]

                component el_short "Short Circuit1" {
                }
                [
                    position = 7904, 7992
                ]

                port p_node {
                    label = "+"
                    position = left center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                port n_node {
                    label = "-"
                    position = right center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                port p_ctrl {
                    label = "Ctrl+"
                    position = 0.0, -26.0
                    kind = pe
                }
                [
                    position = 7768, 7992
                    hide_name = True
                ]

                port n_ctrl {
                    label = "Ctrl-"
                    position = -20.0, -26.0
                    kind = pe
                }
                [
                    position = 8040, 7992
                    hide_name = True
                    scale = -1, 1
                ]

                connect p_node "Short Circuit.p_node" as Connection1
                connect "Short Circuit.n_node" n_node as Connection2
                connect p_ctrl "Short Circuit1.p_node" as Connection3
                connect "Short Circuit1.n_node" n_ctrl as Connection4

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Voltage-Controlled Switch</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">In Xyce, this is an \"S\" type component.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">With an Active-High logic selected, the switch remains closed (is modeled as an R_on resistor) while a positive differential voltage is measured between the + and - terminals. When open, the switch is modeled as an R_off resistor.</p></body></html>"

                    r_on {
                        label = "ON Resistance"
                        widget = edit
                        type = generic
                        default_value = "1e-3"
                    }

                    r_off {
                        label = "OFF Resistance"
                        widget = edit
                        type = generic
                        default_value = "1e6"
                    }

                    logic {
                        label = "Logic"
                        widget = combo
                        combo_values = "Active High", "Active Low"
                        type = string
                        default_value = "Active High"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/vc_switch_high.svg')
                    
                        try:
                            logic = mdl.prop(item_handle, "logic")
                    
                            if mdl.get_property_value(logic) == "Active Low":
                                mdl.set_component_icon_image(item_handle, 'Xyce/vc_switch_low.svg')
                        except: pass
                    ENDCODE
                }
            }
            [
                position = 7440, 7944
                size = 64, 64
            ]

            component Subsystem MESFET {
                layout = static
                component el_short "Short Circuit 2" {
                }
                [
                    position = 7888, 7992
                ]

                component el_short "Short Circuit" {
                }
                [
                    position = 7888, 8064
                ]

                port src {
                    label = "S"
                    position = right center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                port gate {
                    label = "G"
                    position = top center
                    kind = pe
                }
                [
                    position = 7768, 7992
                    hide_name = True
                ]

                port drain {
                    label = "D"
                    position = left center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                junction Junction1 pe
                [
                    position = 7952, 8064
                ]

                connect "Short Circuit.n_node" Junction1 as Connection3
                connect src "Short Circuit.p_node" as Connection1
                connect "Short Circuit 2.n_node" Junction1 as Connection6
                connect gate "Short Circuit 2.p_node" as Connection5
                connect Junction1 drain as Connection4

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Metal-Semiconductor Field Effect Transistor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"Z\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A SPICE library file must be loaded and then the desired model selected from the Model Name list.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Subcircuit-based models found in the file may be added to the list. Please note that in this case ANY kind of subcircuit model will be added.</p></body></html>"

                    subc_model {
                        label = "Include subcircuit-based models"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        no_evaluate

                        CODE property_value_edited
                            filename = mdl.get_property_value(mdl.prop(container_handle, "model_path"))
                            if not filename == "-":
                                repeat_parse(mdl, container_handle)
                        ENDCODE
                    }

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog
                        import os, sys, csv, io, re
                    
                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)
                    
                            def parse_file(self):
                                choose_file = QFileDialog()
                    
                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')
                    
                    
                                if file:
                                    self.parse_models(file)
                                    return True
                                else:
                                    return False
                    
                    
                            def parse_models(self, file):
                                model_list = []
                                subcircuit_model_list = []
                                # 3-pin MESFETs
                                num_pins = 3
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([ A-z0-9_]+)\s+(?:PARAMS)?",
                                                        flags = re.I)
                                # Find individual models
                                nmf_models = re.compile(r"^\.MODEL ([\S]*)\s+NMF", flags = re.I)
                                pmf_models = re.compile(r"^\.MODEL ([\S]*)\s+PMF", flags = re.I)
                                # Models should not be added if inside a subcircuit definition
                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            # Nested IFs in order to reduce the number of RegExes
                                            nmf_match = re.match(nmf_models, line)
                                            if nmf_match:
                                                model_name = nmf_match.group(1)
                                                model_list.append(model_name)
                                            else:
                                                pmf_match = re.match(pmf_models, line)
                                                if pmf_match:
                                                    model_name = pmf_match.group(1)
                                                    model_list.append(model_name)
                                                else:
                                                    sub_match = re.match(sub_based, line)
                                                    if sub_match:
                                                        if len(sub_match.group(2).split()) == num_pins:
                                                            model_name = sub_match.group(1)
                                                            subcircuit_model_list.append(model_name)
                                                        in_sub_flag  = True
                                        else:
                                            if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                in_sub_flag = False
                    
                                    if mdl.get_property_disp_value(mdl.prop(item_handle, "subc_model")) == True:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list + subcircuit_model_list)
                                    else:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)
                    
                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()
                    
                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")
                    ENDCODE

                    CODE define_icon
                        import builtins
                    
                        mdl.set_component_icon_image(item_handle, 'Xyce/mesfet_nchannel.svg')
                    
                        model_name_prop = mdl.prop(item_handle, "model_name")
                        model_name = mdl.get_property_value(model_name_prop)
                        model_path_prop = mdl.prop(item_handle, "model_path")
                        model_path = mdl.get_property_value(model_path_prop)
                    
                        try:
                            builtins.open(model_path)
                            if not model_name == "None":
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, " " + model_name, relpos_x = 0.5, relpos_y = 0.65, size = 8)
                        except:
                            mdl.set_color(item_handle, "red")
                            mdl.disp_component_icon_text(item_handle, "Model", relpos_x = 0.5, relpos_y = 0.65, size = 8)
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        subc_model = mdl.get_property_value(mdl.prop(item_handle, "subc_model"))
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        # HEADER STOP
                        import builtins
                    
                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7680, 8168
                rotation = right
                size = 64, 64
            ]

            component Subsystem BJT {
                layout = static
                component el_short "Short Circuit 2" {
                }
                [
                    position = 7888, 7992
                ]

                component el_short "Short Circuit" {
                }
                [
                    position = 7888, 8064
                ]

                port col {
                    label = "C"
                    position = right center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                port base {
                    label = "B"
                    position = top center
                    kind = pe
                }
                [
                    position = 7768, 7992
                    hide_name = True
                ]

                port emit {
                    label = "E"
                    position = left center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                junction Junction1 pe
                [
                    position = 7952, 8064
                ]

                connect "Short Circuit.n_node" Junction1 as Connection3
                connect col "Short Circuit.p_node" as Connection1
                connect "Short Circuit 2.n_node" Junction1 as Connection6
                connect base "Short Circuit 2.p_node" as Connection5
                connect Junction1 emit as Connection4

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Bipolar Junction Transistor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"Q\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A SPICE library file must be loaded and then the desired model selected from the Model Name list.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Subcircuit-based models found in the file may be added to the list. Please note that in this case ANY kind of subcircuit model will be added.</p></body></html>"

                    subc_model {
                        label = "Include subcircuit-based models"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        no_evaluate

                        CODE property_value_edited
                            filename = mdl.get_property_value(mdl.prop(container_handle, "model_path"))
                            if not filename == "-":
                                repeat_parse(mdl, container_handle)
                        ENDCODE
                    }

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog
                        import os, sys, csv, io, re
                    
                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)
                    
                            def parse_file(self):
                                choose_file = QFileDialog()
                    
                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')
                    
                                if file:
                                    self.parse_models(file)
                                    return True
                                else:
                                    return False
                    
                            def parse_models(self, file):
                                model_list = []
                                subcircuit_model_list = []
                                # 3-pin BJTs (No temperature terminals)
                                num_pins = 3
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([\sA-z0-9_]+)[\s]+(?:PARAMS)?",
                                                        flags = re.I)
                                # Find individual models
                                npn_models = re.compile(r"^\.MODEL ([\S]*)\s+NPN", flags = re.I)
                                pnp_models = re.compile(r"^\.MODEL ([\S]*)\s+PNP", flags = re.I)
                                # Models should not be added if inside a subcircuit definition
                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            # Nested IFs in order to reduce the number of RegExes
                                            npn_match = re.match(npn_models, line)
                                            if npn_match:
                                                model_name = npn_match.group(1)
                                                model_list.append(model_name)
                                            else:
                                                pnp_match = re.match(pnp_models, line)
                                                if pnp_match:
                                                    model_name = pnp_match.group(1)
                                                    model_list.append(model_name)
                                                else:
                                                    sub_match = re.match(sub_based, line)
                                                    if sub_match:
                                                        if len(sub_match.group(2).split()) == num_pins:
                                                            model_name = sub_match.group(1)
                                                            subcircuit_model_list.append(model_name)
                                                        in_sub_flag  = True
                                        else:
                                            if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                in_sub_flag = False
                    
                                    if mdl.get_property_disp_value(mdl.prop(item_handle, "subc_model")) == True:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list + subcircuit_model_list)
                                    else:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)
                    
                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()
                    
                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")
                    ENDCODE

                    CODE define_icon
                        import builtins
                    
                        mdl.set_component_icon_image(item_handle, 'Xyce/bjt_npn.svg')
                    
                        model_name_prop = mdl.prop(item_handle, "model_name")
                        model_name = mdl.get_property_value(model_name_prop)
                        model_path_prop = mdl.prop(item_handle, "model_path")
                        model_path = mdl.get_property_value(model_path_prop)
                    
                        try:
                            builtins.open(model_path)
                            if not model_name == "None":
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, " " + model_name, relpos_x = 0.5, relpos_y = 0.85, size = 8)
                        except:
                            mdl.set_color(item_handle, "red")
                            mdl.disp_component_icon_text(item_handle, "Model", relpos_x = 0.5, relpos_y = 0.85, size = 8)
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        subc_model = mdl.get_property_value(mdl.prop(item_handle, "subc_model"))
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        # HEADER STOP
                        import builtins
                    
                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7800, 8168
                rotation = right
                size = 64, 64
            ]

            component Subsystem JFET {
                layout = static
                component el_short "Short Circuit 2" {
                }
                [
                    position = 7888, 7992
                ]

                component el_short "Short Circuit" {
                }
                [
                    position = 7888, 8064
                ]

                port src {
                    label = "S"
                    position = right center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                port gate {
                    label = "G"
                    position = top center
                    kind = pe
                }
                [
                    position = 7768, 7992
                    hide_name = True
                ]

                port drain {
                    label = "D"
                    position = left center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                junction Junction1 pe
                [
                    position = 7952, 8064
                ]

                connect "Short Circuit.n_node" Junction1 as Connection3
                connect src "Short Circuit.p_node" as Connection1
                connect "Short Circuit 2.n_node" Junction1 as Connection6
                connect gate "Short Circuit 2.p_node" as Connection5
                connect Junction1 drain as Connection4

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Junction Field Effect Transistor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"J\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A SPICE library file must be loaded and then the desired model selected from the Model Name list.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Subcircuit-based models found in the file may be added to the list. Please note that in this case ANY kind of subcircuit model will be added.</p></body></html>"

                    subc_model {
                        label = "Include subcircuit-based models"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        no_evaluate

                        CODE property_value_edited
                            filename = mdl.get_property_value(mdl.prop(container_handle, "model_path"))
                            if not filename == "-":
                                repeat_parse(mdl, container_handle)
                        ENDCODE
                    }

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog
                        import os, sys, csv, io, re
                    
                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)
                    
                            def parse_file(self):
                                choose_file = QFileDialog()
                    
                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')
                    
                                if file:
                                    self.parse_models(file)
                                    return True
                                else:
                                    return False
                    
                            def parse_models(self, file):
                                model_list = []
                                subcircuit_model_list = []
                                # 3-pin JFETs
                                num_pins = 3
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([ A-z0-9_]+)\s+(?:PARAMS)?",
                                                        flags = re.I)
                                # Find individual models
                                njf_models = re.compile(r"^\.MODEL ([\S]*)\s+NJF",flags = re.I)
                                pjf_models = re.compile(r"^\.MODEL ([\S]*)\s+PJF",flags = re.I)
                                # Models should not be added if inside a subcircuit definition
                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            # Nested IFs in order to reduce the number of RegExes
                                            njf_match = re.match(njf_models, line)
                                            if njf_match:
                                                model_name = njf_match.group(1)
                                                model_list.append(model_name)
                                            else:
                                                pjf_match = re.match(pjf_models, line)
                                                if pjf_match:
                                                    model_name = pjf_match.group(1)
                                                    model_list.append(model_name)
                                                else:
                                                    sub_match = re.match(sub_based, line)
                                                    if sub_match:
                                                        if len(sub_match.group(2).split()) == num_pins:
                                                            model_name = sub_match.group(1)
                                                            subcircuit_model_list.append(model_name)
                                                        in_sub_flag  = True
                                        else:
                                            if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                in_sub_flag = False
                    
                                    if mdl.get_property_disp_value(mdl.prop(item_handle, "subc_model")) == True:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list + subcircuit_model_list)
                                    else:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)
                    
                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()
                    
                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")
                    ENDCODE

                    CODE define_icon
                        import builtins
                    
                        mdl.set_component_icon_image(item_handle, 'Xyce/jfet_nchannel.svg')
                    
                        model_name_prop = mdl.prop(item_handle, "model_name")
                        model_name = mdl.get_property_value(model_name_prop)
                        model_path_prop = mdl.prop(item_handle, "model_path")
                        model_path = mdl.get_property_value(model_path_prop)
                    
                        try:
                            builtins.open(model_path)
                            if not model_name == "None":
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, " " + model_name, relpos_x = 0.5, relpos_y = 0.65, size = 8)
                        except:
                            mdl.set_color(item_handle, "red")
                            mdl.disp_component_icon_text(item_handle, "Model", relpos_x = 0.5, relpos_y = 0.65, size = 8)
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        subc_model = mdl.get_property_value(mdl.prop(item_handle, "subc_model"))
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        # HEADER STOP
                        import builtins
                    
                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7552, 8168
                rotation = right
                size = 64, 64
            ]

            component Subsystem MOSFET {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7888, 8064
                ]

                component el_short "Short Circuit 2" {
                }
                [
                    position = 7888, 7992
                ]

                port gate {
                    label = "G"
                    position = top center
                    kind = pe
                }
                [
                    position = 7768, 7992
                    hide_name = True
                ]

                port src {
                    label = "S"
                    position = right center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                port drain {
                    label = "D"
                    position = left center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                junction Junction1 pe
                [
                    position = 7952, 8064
                ]

                connect src "Short Circuit.p_node" as Connection1
                connect "Short Circuit.n_node" Junction1 as Connection3
                connect Junction1 drain as Connection4
                connect gate "Short Circuit 2.p_node" as Connection5
                connect "Short Circuit 2.n_node" Junction1 as Connection6

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Metal-Oxide-Semiconductor Field Effect Transistor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"M\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A SPICE library file must be loaded and then the desired model selected from the Model Name list.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Subcircuit-based models found in the file may be added to the list. Please note that in this case ANY kind of subcircuit model will be added.</p></body></html>"

                    subc_model {
                        label = "Include subcircuit-based models"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        no_evaluate

                        CODE property_value_edited
                            filename = mdl.get_property_value(mdl.prop(container_handle, "model_path"))
                            if not filename == "-":
                                repeat_parse(mdl, container_handle)
                        ENDCODE
                    }

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog
                        import os, sys, csv, io, re
                    
                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)
                    
                            def parse_file(self):
                                choose_file = QFileDialog()
                    
                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')
                    
                                if file:
                                    try:
                                        XyceSim_handle = mdl.get_item('XyceSim1')
                                        tse2xyce_path = mdl.get_property_value(mdl.prop(XyceSim_handle,"tse2xyce_path"))
                                        rel_file = os.path.relpath(file, "/".join(tse2xyce_path.split("/")[:-1]))
                                    except:
                                        mdl.info("Please add a XyceSim1-named XyceSim block and find the executable to enable relative paths")
                                    self.parse_models(file, rel_file)
                                    return True
                                else:
                                    return False
                    
                            def parse_models(self, file, rel_file):
                                model_list = []
                                subcircuit_model_list = []
                                # 3-pin MOSFETs (No temperature terminals)
                                num_pins = 3
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([ A-z0-9_]+)\s+(?:PARAMS)?",
                                                        flags = re.I)
                                # Find individual models
                                nmos_models = re.compile(r"^\.MODEL ([\S]*)\s+NMOS",flags = re.I)
                                pmos_models = re.compile(r"^\.MODEL ([\S]*)\s+PMOS",flags = re.I)
                    
                                # Models should not be added if inside a subcircuit definition
                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            # Nested IFs in order to reduce the number of RegExes
                                            nmos_match = re.match(nmos_models, line)
                                            if nmos_match:
                                                model_name = nmos_match.group(1)
                                                model_list.append(model_name)
                                            else:
                                                pmos_match = re.match(pmos_models, line)
                                                if pmos_match:
                                                    model_name = pmos_match.group(1)
                                                    model_list.append(model_name)
                                                else:
                                                    sub_match = re.match(sub_based, line)
                                                    if sub_match:
                                                        if len(sub_match.group(2).split()) == num_pins:
                                                            model_name = sub_match.group(1)
                                                            subcircuit_model_list.append(model_name)
                                                        in_sub_flag  = True
                                        else:
                                            if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                in_sub_flag = False
                    
                                    if mdl.get_property_disp_value(mdl.prop(item_handle, "subc_model")) == True:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list + subcircuit_model_list)
                                    else:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)
                    
                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()
                    
                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename, filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")
                    ENDCODE

                    CODE define_icon
                        import builtins
                    
                        mdl.set_component_icon_image(item_handle, 'Xyce/mosfet_nmos.svg')
                    
                        model_name_prop = mdl.prop(item_handle, "model_name")
                        model_name = mdl.get_property_value(model_name_prop)
                        model_path_prop = mdl.prop(item_handle, "model_path")
                        model_path = mdl.get_property_value(model_path_prop)
                    
                        try:
                            builtins.open(model_path)
                            if not model_name == "None":
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, " " + model_name, relpos_x = 0.5, relpos_y = 0.9, size = 8)
                        except:
                            mdl.set_color(item_handle, "red")
                            mdl.disp_component_icon_text(item_handle, "Model", relpos_x = 0.5, relpos_y = 0.9, size = 8)
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        subc_model = mdl.get_property_value(mdl.prop(item_handle, "subc_model"))
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        # HEADER STOP
                        import builtins
                    
                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7432, 8168
                rotation = right
                size = 64, 64
            ]

            component Subsystem Diode {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7880, 8040
                    rotation = down
                ]

                port p_node {
                    label = "+"
                    position = right center
                    kind = pe
                }
                [
                    position = 8000, 8040
                    rotation = down
                    hide_name = True
                ]

                port n_node {
                    label = "-"
                    position = left center
                    kind = pe
                }
                [
                    position = 7776, 8040
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                connect "Short Circuit.n_node" n_node as Connection2
                connect p_node "Short Circuit.p_node" as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Diode</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"D\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A SPICE library file must be loaded and then the desired model selected from the Model Name list.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Subcircuit-based models found in the file may be added to the list. Please note that in this case ANY kind of subcircuit model will be added.</p></body></html>"

                    subc_model {
                        label = "Subcircuit-based models"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        no_evaluate

                        CODE property_value_edited
                            filename = mdl.get_property_value(mdl.prop(container_handle, "model_path"))
                            if not filename == "-":
                                repeat_parse(mdl, container_handle)
                        ENDCODE
                    }

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog
                        import os, sys, csv, io, re
                    
                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)
                    
                            def parse_file(self):
                                choose_file = QFileDialog()
                    
                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')
                    
                                if file:
                                    self.parse_models(file)
                                    return True
                                else:
                                    return False
                    
                            def parse_models(self, file):
                                model_list = []
                                subcircuit_model_list = []
                                # 2-pin diodes
                                num_pins = 2
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([ A-z0-9_]+)\s+(?:PARAMS)?",
                                                        flags = re.I)
                                # Find individual models
                                diode_models = re.compile(r"^\.MODEL ([.\S]*)\s+(?:D|d)", flags = re.I)
                                # Models should not be added if inside a subcircuit definition
                    
                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            # Nested IFs in order to reduce the number of RegExes
                                            diode_match = re.match(diode_models, line)
                                            if diode_match:
                                                model_name = diode_match.group(1)
                                                model_list.append(model_name)
                                            else:
                                                sub_match = re.match(sub_based, line)
                                                if sub_match:
                                                    if len(sub_match.group(2).split()) == num_pins:
                                                        model_name = sub_match.group(1)
                                                        subcircuit_model_list.append(model_name)
                                                    in_sub_flag  = True
                                        else:
                                            # Detect end of the subcircuit and update flag
                                            if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                in_sub_flag = False
                    
                                    if mdl.get_property_disp_value(mdl.prop(item_handle, "subc_model")) == True:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), subcircuit_model_list)
                                    else:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)
                    
                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()
                    
                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")
                    ENDCODE

                    CODE define_icon
                        import builtins
                    
                        mdl.set_component_icon_image(item_handle, 'Xyce/diode.svg')
                    
                        model_name_prop = mdl.prop(item_handle, "model_name")
                        model_name = mdl.get_property_value(model_name_prop)
                        model_path_prop = mdl.prop(item_handle, "model_path")
                        model_path = mdl.get_property_value(model_path_prop)
                    
                        try:
                            builtins.open(model_path)
                            if not model_name == "None":
                                 mdl.set_color(item_handle, "blue")
                                 mdl.disp_component_icon_text(item_handle, " " + model_name, relpos_x = 0.5, relpos_y = 0.2, size = 8)
                        except:
                            mdl.set_color(item_handle, "red")
                            mdl.disp_component_icon_text(item_handle, "Model", relpos_x = 0.5, relpos_y = 0.2, size = 8)
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        subc_model = mdl.get_property_value(mdl.prop(item_handle, "subc_model"))
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        # HEADER STOP
                        import builtins
                    
                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7432, 8064
                rotation = right
                size = 64, 64
            ]

            component Subsystem "Ideal Diode" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7880, 8040
                    rotation = down
                ]

                port p_node {
                    label = "+"
                    position = right center
                    kind = pe
                }
                [
                    position = 8000, 8040
                    rotation = down
                    hide_name = True
                ]

                port n_node {
                    label = "-"
                    position = left center
                    kind = pe
                }
                [
                    position = 7776, 8040
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                connect "Short Circuit.n_node" n_node as Connection2
                connect p_node "Short Circuit.p_node" as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Ideal Diode.</p></body></html>"

                    vd_on {
                        label = "Forward voltage drop"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "V"
                    }

                    r_on {
                        label = "Conduction resistance"
                        widget = edit
                        type = generic
                        default_value = "1e-4"
                        unit = "Ω"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE

                    CODE init
                    ENDCODE

                    CODE define_icon
                        import builtins
                        
                        mdl.set_component_icon_image(item_handle, 'Xyce/diode.svg')
                    ENDCODE

                    CODE pre_compile
                    ENDCODE
                }
            }
            [
                position = 7048, 8000
                rotation = right
                size = 64, 64
            ]

            component Subsystem "Unidirectional Switch" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7888, 8064
                ]

                component el_short "Short Circuit 2" {
                }
                [
                    position = 7888, 7992
                ]

                port gate {
                    label = "G"
                    position = top center
                    kind = pe
                }
                [
                    position = 7768, 7992
                    hide_name = True
                ]

                port src {
                    label = "S"
                    position = right center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                port drain {
                    label = "D"
                    position = left center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                junction Junction1 pe
                [
                    position = 7952, 8064
                ]

                connect src "Short Circuit.p_node" as Connection1
                connect "Short Circuit.n_node" Junction1 as Connection3
                connect Junction1 drain as Connection4
                connect gate "Short Circuit 2.p_node" as Connection5
                connect "Short Circuit 2.n_node" Junction1 as Connection6

                r_on = "1e-4"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Unidirectional Switch Model.</p></body></html>"

                    vd_on {
                        label = "Diode forward voltage drop"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "V"
                    }

                    r_on {
                        label = "Conduction resistance"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "Ω"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE

                    CODE init
                    ENDCODE

                    CODE define_icon
                        import builtins
                        
                        mdl.set_component_icon_image(item_handle, 'Xyce/mosfet_nmos.svg')
                    ENDCODE

                    CODE pre_compile
                    ENDCODE
                }
            }
            [
                position = 7048, 8120
                rotation = right
                size = 64, 64
            ]
        }
        [
            position = 8320, 8016
            size = 96, 96
        ]

        component Category "Passive Elements" {
            layout = dynamic
            component Subsystem "Ideal Inductor" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7912, 8088
                    rotation = down
                ]

                port p_node {
                    position = right center
                    kind = pe
                }
                [
                    position = 8048, 8088
                    rotation = down
                    hide_name = True
                ]

                port n_node {
                    position = left center
                    kind = pe
                }
                [
                    position = 7800, 8088
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                connect "Short Circuit.p_node" p_node as Connection2
                connect n_node "Short Circuit.n_node" as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Ideal Inductor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"L\" type element with only the IC parameter.</p></body></html>"

                    L {
                        label = "Inductance"
                        widget = edit
                        type = generic
                        default_value = "10e-6"
                        unit = "H"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    IC {
                        label = "Initial Current"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "A"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/inductor.svg')
                        
                        ignore = False
                        def unit_conv(value, unit):
                            if value == 0:
                                pass
                            elif value < 1e-9:
                                value = value * 1e12
                                unit = "p" + unit
                            elif value < 1e-6:
                                value = value * 1e9
                                unit = "n" + unit
                            elif value < 1e-3:
                                value = value * 1e6
                                unit = "μ" + unit
                            elif value < 1:
                                value = value * 1e3
                                unit = "m" + unit
                            elif value < 1e3:
                                pass
                            elif value < 1e6:
                                value = value * 1e-3
                                unit = "k" + unit
                            elif value < 1e9:
                                value = value * 1e-6
                                unit = "M" + unit
                            elif value < 1e12:
                                value = value * 1e-9
                                unit = "G" + unit
                            return (value, unit)
                        
                        def prefix_to_scientific(prefix):
                            if prefix == "p":
                                return "e-12"
                            if prefix == "n":
                                return "e-9"
                            if prefix == "u":
                                return "e-6"
                            if prefix == "m":
                                return "e-3"
                            if prefix == "k":
                                return "e3"
                            if prefix == "M":
                                return "e6"
                            if prefix == "G":
                                return "e9"
                        
                        def get_text(prop_handle, unit):
                            val = mdl.get_property_value(prop_handle)
                            # If val is not a string
                            if not isinstance(val, str):
                                val, unit = unit_conv(val, unit)
                                color = "blue"
                                inside_text = f"{val} {unit}"
                                return (inside_text, color)
                            # In case a variable (or a unit prefix) is being used
                            else:
                                try:
                                    import re
                                    matching = re.match(r"([0-9.]+)\s*(p|n|u|m|k|M|G)", val)
                                    if matching.group(2):
                                        nonlocal ignore
                                        n_val = matching.group(1) + prefix_to_scientific(matching.group(2))
                                        # The property must have mdl.refresh_icon(container_handle) in property_value_edited
                                        mdl.set_property_value(prop_handle, n_val)
                                        ignore = True
                                        return ("", "")
                                except:
                                    color = "green"
                                    inside_text = f"{val}"
                                    return (inside_text, color)
                        
                        L_prop = mdl.prop(item_handle, "L")
                        
                        L_text, color = get_text(L_prop, "H")
                        
                        if not ignore == True:
                            mdl.set_color(item_handle, color)
                            mdl.disp_component_icon_text(item_handle, L_text, relpos_y = 0.2, size = 8)
                    ENDCODE

                    CODE post_resolve
                        # HEADER START
                        L = mdl.get_property_value(mdl.prop(item_handle, "L"))
                        IC = mdl.get_property_value(mdl.prop(item_handle, "IC"))
                        # HEADER STOP
                        mdl.refresh_icon(item_handle)
                    ENDCODE
                }
            }
            [
                position = 7784, 7904
                size = 64, 64
            ]

            component Subsystem "Ideal Resistor" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7904, 8064
                    rotation = down
                ]

                port p_node {
                    label = "+"
                    position = right center
                    kind = pe
                }
                [
                    position = 8008, 8064
                    rotation = down
                    hide_name = True
                ]

                port n_node {
                    label = "-"
                    position = left center
                    kind = pe
                }
                [
                    position = 7800, 8064
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                connect "Short Circuit.p_node" p_node as Connection2
                connect n_node "Short Circuit.n_node" as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Ideal Resistor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"R\" type element.</p></body></html>"

                    R {
                        label = "Resistance"
                        widget = edit
                        type = generic
                        default_value = "100"
                        unit = "Ω"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/resistor.svg')
                        
                        ignore = False
                        def unit_conv(value, unit):
                            if value == 0:
                                pass
                            elif value < 1e-9:
                                value = value * 1e12
                                unit = "p" + unit
                            elif value < 1e-6:
                                value = value * 1e9
                                unit = "n" + unit
                            elif value < 1e-3:
                                value = value * 1e6
                                unit = "μ" + unit
                            elif value < 1:
                                value = value * 1e3
                                unit = "m" + unit
                            elif value < 1e3:
                                pass
                            elif value < 1e6:
                                value = value * 1e-3
                                unit = "k" + unit
                            elif value < 1e9:
                                value = value * 1e-6
                                unit = "M" + unit
                            elif value < 1e12:
                                value = value * 1e-9
                                unit = "G" + unit
                            return (value, unit)
                        
                        def prefix_to_scientific(prefix):
                            if prefix == "p":
                                return "e-12"
                            if prefix == "n":
                                return "e-9"
                            if prefix == "u":
                                return "e-6"
                            if prefix == "m":
                                return "e-3"
                            if prefix == "k":
                                return "e3"
                            if prefix == "M":
                                return "e6"
                            if prefix == "G":
                                return "e9"
                        
                        def get_text(prop_handle, unit):
                            val = mdl.get_property_value(prop_handle)
                            # If val is not a string
                            if not isinstance(val, str):
                                val, unit = unit_conv(val, unit)
                                color = "blue"
                                inside_text = f"{val} {unit}"
                                return (inside_text, color)
                            # In case a variable (or a unit prefix) is being used
                            else:
                                try:
                                    import re
                                    matching = re.match(r"([0-9.]+)\s*(p|n|u|m|k|M|G)", val)
                                    if matching.group(2):
                                        nonlocal ignore
                                        n_val = matching.group(1) + prefix_to_scientific(matching.group(2))
                                        # The property must have mdl.refresh_icon(container_handle) in property_value_edited
                                        mdl.set_property_value(prop_handle, n_val)
                                        ignore = True
                                        return ("", "")
                                except:
                                    color = "green"
                                    inside_text = f"{val}"
                                    return (inside_text, color)
                        
                        R_prop = mdl.prop(item_handle, "R")
                        R_text, color = get_text(R_prop, "Ω")
                        
                        if not ignore == True:
                            mdl.set_color(item_handle, color)
                            mdl.disp_component_icon_text(item_handle, R_text, relpos_y = 0.2, size = 8)
                    ENDCODE

                    CODE post_resolve
                        # HEADER START
                        R = mdl.get_property_value(mdl.prop(item_handle, "R"))
                        # HEADER STOP
                        mdl.refresh_icon(item_handle)
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7880, 7904
                size = 64, 64
            ]

            component Subsystem Memristor {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7864, 8096
                    rotation = down
                ]

                port p_node {
                    position = right center
                    kind = pe
                }
                [
                    position = 7984, 8096
                    rotation = down
                    hide_name = True
                ]

                port n_node {
                    position = left center
                    kind = pe
                }
                [
                    position = 7728, 8096
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                connect p_node "Short Circuit.p_node" as Connection1
                connect "Short Circuit.n_node" n_node as Connection2

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Memristor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"ymemristor\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A SPICE library file must be loaded and then the desired model selected from the Model Name list.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Subcircuit-based models found in the file may be added to the list. Please note that in this case ANY kind of subcircuit model will be added.</p></body></html>"

                    subc_model {
                        label = "Include subcircuit-based models"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        no_evaluate

                        CODE property_value_edited
                            filename = mdl.get_property_value(mdl.prop(container_handle, "model_path"))
                            if not filename == "-":
                                repeat_parse(mdl, container_handle)
                        ENDCODE
                    }

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = edit
                        type = generic
                        default_value = "-"
                        nonvisible
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog
                        import os, sys, csv, io, re
                    
                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)
                    
                            def parse_file(self):
                                choose_file = QFileDialog()
                    
                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')
                    
                                if file:
                                    self.parse_models(file)
                                    return True
                                else:
                                    return False
                    
                            def parse_models(self, file):
                                model_list = []
                                subcircuit_model_list = []
                                # 2-pin memristors
                                num_pins = 2
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([\sA-z0-9]+)[\s]+(?:PARAMS)?",
                                                        flags = re.I)
                                # Find individual models
                                memr_models = re.compile(r"^\.MODEL ([.\S]*)\s+MEMRISTOR",
                                                        flags = re.I)
                                # Models should not be added if inside a subcircuit definition
                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            # Nested IFs in order to reduce the number of RegExes
                                            memr_match = re.match(memr_models, line)
                                            if memr_match:
                                                model_name = memr_match.group(1)
                                                model_list.append(model_name)
                                            else:
                                                sub_match = re.match(sub_based, line)
                                                if sub_match:
                                                    if len(sub_match.group(2).split()) == num_pins:
                                                        model_name = sub_match.group(1)
                                                        subcircuit_model_list.append(model_name)
                                                    in_sub_flag  = True
                                        else:
                                            # Detect end of the subcircuit and update flag
                                            if re.match(r".ENDS", line):
                                                in_sub_flag = False
                    
                                    if mdl.get_property_disp_value(mdl.prop(item_handle, "subc_model")) == True:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list + subcircuit_model_list)
                                    else:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)
                    
                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()
                    
                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")
                    ENDCODE

                    CODE define_icon
                        import builtins
                    
                        mdl.set_component_icon_image(item_handle, 'Xyce/memristor.svg')
                    
                        model_name_prop = mdl.prop(item_handle, "model_name")
                        model_name = mdl.get_property_value(model_name_prop)
                        model_path_prop = mdl.prop(item_handle, "model_path")
                        model_path = mdl.get_property_value(model_path_prop)
                    
                        try:
                            builtins.open(model_path)
                            if not model_name == "None":
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, " " + model_name, relpos_x = 0.5, relpos_y = 0.80, size = 8)
                        except:
                            mdl.set_color(item_handle, "red")
                            mdl.disp_component_icon_text(item_handle, "Model", relpos_x = 0.5, relpos_y = 0.80, size = 8)
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        subc_model = mdl.get_property_value(mdl.prop(item_handle, "subc_model"))
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        # HEADER STOP
                        import builtins
                    
                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7688, 8008
                size = 64, 64
            ]

            component Subsystem "Ideal Capacitor" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7904, 8064
                    rotation = down
                ]

                port p_node {
                    position = right center
                    kind = pe
                }
                [
                    position = 8024, 8064
                    rotation = down
                    hide_name = True
                ]

                port n_node {
                    position = left center
                    kind = pe
                }
                [
                    position = 7792, 8064
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                connect n_node "Short Circuit.n_node" as Connection1
                connect "Short Circuit.p_node" p_node as Connection2

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Ideal Capacitor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"C\" type element with only the IC parameter.</p></body></html>"

                    C {
                        label = "Capacitance"
                        widget = edit
                        type = generic
                        default_value = "100e-6"
                        unit = "F"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    IC {
                        label = "Initial Voltage"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "V"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/capacitor.svg')
                    
                        ignore = False
                        def unit_conv(value, unit):
                            if value == 0:
                                pass
                            elif value < 1e-9:
                                value = value * 1e12
                                unit = "p" + unit
                            elif value < 1e-6:
                                value = value * 1e9
                                unit = "n" + unit
                            elif value < 1e-3:
                                value = value * 1e6
                                unit = "μ" + unit
                            elif value < 1:
                                value = value * 1e3
                                unit = "m" + unit
                            elif value < 1e3:
                                pass
                            elif value < 1e6:
                                value = value * 1e-3
                                unit = "k" + unit
                            elif value < 1e9:
                                value = value * 1e-6
                                unit = "M" + unit
                            elif value < 1e12:
                                value = value * 1e-9
                                unit = "G" + unit
                            return (value, unit)
                    
                        def prefix_to_scientific(prefix):
                            if prefix == "p":
                                return "e-12"
                            if prefix == "n":
                                return "e-9"
                            if prefix == "u":
                                return "e-6"
                            if prefix == "m":
                                return "e-3"
                            if prefix == "k":
                                return "e3"
                            if prefix == "M":
                                return "e6"
                            if prefix == "G":
                                return "e9"
                    
                        def get_text(prop_handle, unit):
                            val = mdl.get_property_value(prop_handle)
                            # If val is not a string
                            if not isinstance(val, str):
                                val, unit = unit_conv(val, unit)
                                color = "blue"
                                inside_text = f"{val} {unit}"
                                return (inside_text, color)
                            # In case a variable (or a unit prefix) is being used
                            else:
                                try:
                                    import re
                                    matching = re.match(r"([0-9.]+)\s*(p|n|u|m|k|M|G)", val)
                                    if matching.group(2):
                                        nonlocal ignore
                                        n_val = matching.group(1) + prefix_to_scientific(matching.group(2))
                                        # The property must have mdl.refresh_icon(container_handle) in property_value_edited
                                        mdl.set_property_value(prop_handle, n_val)
                                        ignore = True
                                        return ("", "")
                                except:
                                    color = "green"
                                    inside_text = f"{val}"
                                    return (inside_text, color)
                    
                        C_prop = mdl.prop(item_handle, "C")
                    
                        C_text, color = get_text(C_prop, "F")
                    
                        if not ignore == True:
                            mdl.set_color(item_handle, color)
                            mdl.disp_component_icon_text(item_handle, C_text, relpos_y = 0.12, size = 8)
                    ENDCODE

                    CODE pre_compile
                    ENDCODE

                    CODE post_resolve
                        # HEADER START
                        C = mdl.get_property_value(mdl.prop(item_handle, "C"))
                        IC = mdl.get_property_value(mdl.prop(item_handle, "IC"))
                        # HEADER STOP
                        mdl.refresh_icon(item_handle)
                    ENDCODE
                }
            }
            [
                position = 7688, 7904
                size = 64, 64
            ]

            component Subsystem "Coupled Inductor" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7896, 8064
                    rotation = down
                ]

                port n_node {
                    position = left center
                    kind = pe
                }
                [
                    position = 7776, 8064
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                port p_node {
                    position = right center
                    kind = pe
                }
                [
                    position = 8000, 8064
                    rotation = down
                    hide_name = True
                ]

                connect n_node "Short Circuit.n_node" as Connection1
                connect "Short Circuit.p_node" p_node as Connection2

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Coupled Inductor</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">In Xyce, this is a \"K\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This component identifies other coupled inductors in the circuit.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">From the \"Add\" tab, you may select another Coupled Inductor, specify a mutual inductance value and then click \"Add Selected\".</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">From the \"Edit\" tab, you may select the inductors already coupled and then decouple it by clicking on \"Remove Selected\" or define a new mutual inductance value and then click on \"Update\".</p></body></html>"

                    L {
                        label = "Self Inductance"
                        widget = edit
                        type = generic
                        default_value = "1e-04"
                        unit = "H"

                        CODE property_value_changed
                            self_ind_update(mdl, container_handle)
                            update_coupled(mdl)
                            update_availability(mdl)
                        ENDCODE
                    }

                    IC {
                        label = "Initial Current"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "A"
                    }

                    coupled_to {
                        label = "Coupled to Inductors"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        nonvisible
                        no_evaluate
                    }

                    refresh {
                        label = "Refresh"
                        widget = button
                        type = string
                        default_value = "Refresh"
                        nonvisible
                        no_evaluate

                        CODE button_clicked
                            update_availability(mdl)
                            update_coupled(mdl)
                        ENDCODE
                    }

                    available {
                        label = "Available Inductors"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        group = "Add"
                        no_evaluate
                    }

                    mutual_inductance {
                        label = "Mutual Inductance"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "H"
                        group = "Add"
                    }

                    add {
                        widget = button
                        type = string
                        default_value = "Add Selected"
                        group = "Add"
                        no_evaluate

                        CODE button_clicked
                            add_inductor(mdl, container_handle)
                            update_coupled(mdl)
                            update_availability(mdl)
                        ENDCODE
                    }

                    select_coupled {
                        label = "Select Coupled Inductor"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        group = "Edit"
                        no_evaluate

                        CODE property_value_edited
                            get_coupling_coef(mdl, container_handle)
                        ENDCODE
                    }

                    remove {
                        widget = button
                        type = string
                        default_value = "Remove Selected"
                        group = "Edit"
                        no_evaluate

                        CODE button_clicked
                            remove_inductor(mdl, container_handle)
                        ENDCODE
                    }

                    change_mutual {
                        label = "New Mutual Inductance"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "H"
                        group = "Edit"
                    }

                    change {
                        widget = button
                        type = string
                        default_value = "Update"
                        group = "Edit"
                        no_evaluate

                        CODE button_clicked
                            update_coupling_coef(mdl, container_handle)
                            update_coupled(mdl)
                            update_availability(mdl)
                        ENDCODE
                    }

                    coupled_dict {
                        label = "Dictionary of coupled inductors"
                        widget = combo
                        combo_values = "{}"
                        type = string
                        default_value = "{}"
                        nonvisible
                        no_evaluate
                    }

                    handle_dict {
                        label = "Dictionary of handles and names"
                        widget = combo
                        combo_values = "{}"
                        type = string
                        default_value = "{}"
                        nonvisible
                        no_evaluate
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        handle_copied_component()
                        load_from_combo()
                        update_availability(mdl)
                        update_coupled(mdl)
                        dialog.exec_()
                    
                    ENDCODE

                    CODE init
                        from copy import deepcopy
                        import ast
                    
                        # First inductor added  #
                        # Create namespace vars #
                        try: mdl.get_ns_var("coupled_dict")
                        except: mdl.set_ns_var("coupled_dict", {})
                        try: mdl.get_ns_var("handle_dict")
                        except: mdl.set_ns_var("handle_dict", {})
                        # # # # # # # # # # # # #
                    
                        # Make invisible
                        mdl.hide_property(mdl.prop(item_handle, "coupled_dict"))
                        mdl.hide_property(mdl.prop(item_handle, "handle_dict"))
                    
                        handle_dict = mdl.get_ns_var("handle_dict")
                        coupled_dict = mdl.get_ns_var("coupled_dict")
                    
                        L_prop = mdl.prop(item_handle, "L")
                        L = mdl.get_property_value(L_prop)
                    
                        ind_name = mdl.get_fqn(item_handle).split(".")[0]
                    
                        this_ind_dict = {ind_name:L}
                        coupled_dict.update({ind_name:this_ind_dict})
                        handle_dict.update({item_handle.item_fqid:ind_name})
                    
                        # The following lines are needed for opening saved schematics
                        # Saves the data as invisible ComboBox entries
                        # If the inductor is not the first one added:
                        if not coupled_dict == {ind_name:this_ind_dict}:
                            cdict_prop = mdl.prop(item_handle, "coupled_dict")
                            hdict_prop = mdl.prop(item_handle, "handle_dict")
                            mdl.set_property_combo_values(cdict_prop, [str(coupled_dict)])
                            mdl.set_property_combo_values(hdict_prop, [str(handle_dict)])
                    
                        def add_inductor(mdl, item_handle):
                            this_ind_name = mdl.get_fqn(item_handle).split(".")[0]
                            # Prop handles
                            coupled_prop = mdl.prop(item_handle, "coupled_to")
                            edit_prop = mdl.prop(item_handle, "select_coupled")
                            mutual_ind_prop = mdl.prop(item_handle, "mutual_inductance")
                            available_prop = mdl.prop(item_handle, "available")
                            # Current Combo values
                            av_list = mdl.get_property_combo_values(available_prop)
                            coupled_list = mdl.get_property_combo_values(coupled_prop)
                            # Name of the inductor currently selected to be added
                            selected_ind = mdl.get_property_disp_value(available_prop)
                            # Mutual inductance
                            mut_ind_value = mdl.get_property_disp_value(mutual_ind_prop)
                    
                            if not selected_ind == "None":
                                # Update coupled_dict with the new entry.
                                this_dict = coupled_dict.get(this_ind_name)
                                this_dict.update({selected_ind:mut_ind_value})
                                # Must update with the other inductor entry
                                selected_ind_dict = coupled_dict.get(selected_ind)
                                selected_ind_dict.update({this_ind_name:mut_ind_value})
                                # Update all necessary Combos
                                #coupled_list.append(selected_ind)
                    
                        def load_from_combo():
                            try: mdl.get_ns_var("loaded")
                            # When loading a schematic, the namespace variable is empty
                            except:
                                mdl.info("Loading")
                                cdict_prop = mdl.prop(item_handle, "coupled_dict")
                                hdict_prop = mdl.prop(item_handle, "handle_dict")
                                cdict = mdl.get_property_value(cdict_prop)
                                hdict = mdl.get_property_value(hdict_prop)
                                saved_c = ast.literal_eval(cdict)
                                saved_h = ast.literal_eval(cdict)
                                mdl.info("before " + str(coupled_dict))
                                mdl.info("LOADED VALUES: " + str(saved_c))
                                coupled_dict.update(saved_c)
                                mdl.info("after " + str(coupled_dict))
                                handle_dict.update(saved_h)
                                mdl.set_ns_var("loaded", True)
                    
                        def handle_copied_component():
                            nonlocal this_ind_dict
                            ind_fqid = item_handle.item_fqid
                            try:
                                # The next line should raise an exception if not copied
                                mdl.info("my name: " + handle_dict[ind_fqid])
                                mdl.info("item was copied")
                                ind_name = mdl.get_fqn(item_handle).split(".")[0]
                                L_prop = mdl.prop(item_handle, "L")
                                L = mdl.get_property_value(L_prop)
                    
                                # Take advantage later of dictionary mutability
                                this_ind_dict = {ind_name:L}
                                coupled_dict.update({ind_name:this_ind_dict})
                                handle_dict.update({item_handle.item_fqid:ind_name})
                            except:
                                mdl.info("not copied")
                    
                        def get_list_of_inds(mdl):
                            # Every schematic item handle
                            items = mdl.get_items()
                            # This list will be filled with inductor handles
                            list_of_inductors = []
                            list_of_ind_names = []
                    
                            for item in items:
                                try:
                                    if mdl.get_component_type_name(item) == "Coupled Inductor":
                                        this_ind_name = mdl.get_fqn(item).split(".")[0]
                                        mdl.info(this_ind_name)
                                        # Append to the lists
                                        list_of_inductors.append(item)
                                        list_of_ind_names.append(this_ind_name)
                                except: pass
                    
                            # The component could have been renamed
                            for ind in list_of_inductors:
                                cur_name = mdl.get_fqn(ind).split(".")[0]
                                old_name = handle_dict.get(ind.item_fqid, cur_name)
                                if not cur_name == old_name:
                                    # Update main dict entries
                                    handle_dict.update({ind.item_fqid:cur_name})
                                    coupled_dict.update({cur_name:coupled_dict.pop(old_name)})
                                    # Need to also update the dictionary of other inductors since
                                    # there may already be coupled inductors
                                    for ind2 in list_of_inductors:
                                        ind2_name = handle_dict.get(ind2.item_fqid)
                                        other_ind_dict = coupled_dict.get(ind2_name, {})
                                        try:
                                            other_ind_dict.update({cur_name:other_ind_dict.pop(old_name)})
                                        except KeyError: pass
                    
                            # Take the opportunity to update coupled_dict to contain only
                            # existing inductors
                            coupled_dict_inductors = list(coupled_dict.keys())
                            for ind in coupled_dict_inductors:
                                # If the entry doesn't exist in the schematic, pop it
                                if ind not in list_of_ind_names:
                                    coupled_dict.pop(ind)
                                # The removed inductor could already be coupled
                                cur_coupled = coupled_dict.get(ind)
                                if not cur_coupled == None:
                                    for k in list(cur_coupled.keys()):
                                        if k not in list_of_ind_names:
                                            cur_coupled.pop(k)
                    
                            # Do the same with handle_dict
                            handle_dict_inductors = list(handle_dict.keys())
                            for ind in handle_dict_inductors:
                                # If the entry doesn't exist in the schematic, pop it
                                if ind not in [i.item_fqid for i in list_of_inductors]:
                                    handle_dict.pop(ind)
                    
                            for ind in list_of_inductors:
                                # Update save combos
                                update_dict_combos(ind)
                    
                            return (list_of_inductors, list_of_ind_names)
                    
                        def update_availability(mdl):
                            # Get the inductor handles
                            list_of_inductors, list_of_ind_names = get_list_of_inds(mdl)
                            for ind in list_of_inductors:
                                av_prop = mdl.prop(ind, "available")
                                cur_ind_name = handle_dict.get(ind.item_fqid)
                                # av_inds starts as a copy of the complete list of inductors
                                av_inds = list_of_ind_names[:]
                                # Find out to what inductors this one (ind) is coupled to
                                cur_coupled = list(coupled_dict.get(cur_ind_name,{}).keys())
                                # Remove them from the complete list of inductors and update the Combo
                                for coupled in cur_coupled:
                                    av_inds.remove(coupled)
                                mdl.set_property_combo_values(av_prop, av_inds)
                    
                                # Refresh drawing
                                mdl.refresh_icon(ind)
                    
                        def update_coupled(mdl):
                            list_of_inductors, list_of_ind_names = get_list_of_inds(mdl)
                            for ind in list_of_inductors:
                                coupled_prop = mdl.prop(ind, "coupled_to")
                                select_coupled_prop = mdl.prop(ind, "select_coupled")
                                cur_ind_name = handle_dict.get(ind.item_fqid)
                                # Find out to what inductors this one (ind) is coupled to
                                cur_coupled = list(coupled_dict.get(cur_ind_name,{}).keys())
                                mdl.info("inductor " + str(cur_ind_name) + " coupto " + str(cur_coupled))
                                try:
                                    # Remove self
                                    cur_coupled.remove(cur_ind_name)
                                except: pass
                    
                                # Update the ComboBox
                                mdl.set_property_combo_values(coupled_prop, cur_coupled)
                                mdl.set_property_combo_values(select_coupled_prop, cur_coupled)
                    
                        def get_coupling_coef(mdl, item_handle):
                            # Prop handles
                            select_coupled_prop = mdl.prop(item_handle, "select_coupled")
                            change_mutual = mdl.prop(item_handle, "change_mutual")
                    
                            ind_name = mdl.get_fqn(item_handle).split(".")[0]
                            selected_ind = mdl.get_property_disp_value(select_coupled_prop)
                            coup_coef = coupled_dict.get(ind_name,{}).get(selected_ind)
                            mdl.set_property_disp_value(change_mutual, coup_coef)
                    
                        def update_coupling_coef(mdl, item_handle):
                            # Prop handles
                            select_coupled_prop = mdl.prop(item_handle, "select_coupled")
                            change_mutual_prop = mdl.prop(item_handle, "change_mutual")
                    
                            ind_name = mdl.get_fqn(item_handle).split(".")[0]
                            new_value = mdl.get_property_disp_value(change_mutual_prop)
                            selected_ind = mdl.get_property_disp_value(select_coupled_prop)
                    
                            # Update coupled dict entries
                            coupled_dict.get(selected_ind,{}).update({ind_name:new_value})
                            coupled_dict.get(ind_name,{}).update({selected_ind:new_value})
                    
                    
                        def remove_inductor(mdl, item_handle):
                            # Prop handles
                            select_coupled_prop = mdl.prop(item_handle, "select_coupled")
                    
                            ind_name = mdl.get_fqn(item_handle).split(".")[0]
                            selected_ind = mdl.get_property_disp_value(select_coupled_prop)
                            if not selected_ind == "None":
                                # Remove selected inductor
                                coupled_dict.get(ind_name,{}).pop(selected_ind)
                                # Also remove this inductor from the dict of the selected inductor
                                coupled_dict.get(selected_ind,{}).pop(ind_name)
                    
                            # Update schematic
                            update_coupled(mdl)
                            update_availability(mdl)
                    
                        def self_ind_update(mdl, item_handle):
                            L_prop = mdl.prop(item_handle, "L")
                            L = mdl.get_property_value(L_prop)
                    
                            ind_name = handle_dict.get(item_handle.item_fqid)
                            this_ind_dict.update({ind_name:L})
                    
                        def update_dict_combos(ind_handle):
                            # Update Combos of other inductors
                            c_prop = mdl.prop(ind_handle, "coupled_dict")
                            h_prop = mdl.prop(ind_handle, "handle_dict")
                            mdl.set_property_combo_values(c_prop, [str(coupled_dict)])
                            mdl.set_property_combo_values(h_prop, [str(handle_dict)])
                    
                    
                        update_availability(mdl)
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        L = mdl.get_property_value(mdl.prop(item_handle, "L"))
                        IC = mdl.get_property_value(mdl.prop(item_handle, "IC"))
                        coupled_to = mdl.get_property_value(mdl.prop(item_handle, "coupled_to"))
                        refresh = mdl.get_property_value(mdl.prop(item_handle, "refresh"))
                        available = mdl.get_property_value(mdl.prop(item_handle, "available"))
                        mutual_inductance = mdl.get_property_value(mdl.prop(item_handle, "mutual_inductance"))
                        add = mdl.get_property_value(mdl.prop(item_handle, "add"))
                        select_coupled = mdl.get_property_value(mdl.prop(item_handle, "select_coupled"))
                        remove = mdl.get_property_value(mdl.prop(item_handle, "remove"))
                        change_mutual = mdl.get_property_value(mdl.prop(item_handle, "change_mutual"))
                        change = mdl.get_property_value(mdl.prop(item_handle, "change"))
                        coupled_dict = mdl.get_property_value(mdl.prop(item_handle, "coupled_dict"))
                        handle_dict = mdl.get_property_value(mdl.prop(item_handle, "handle_dict"))
                        # HEADER STOP
                        load_from_combo()
                        update_availability(mdl)
                        update_coupled(mdl)
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/not_coupled_inductor.svg')
                    
                        try:
                            handle_dict = mdl.get_ns_var("handle_dict")
                            coupled_dict = mdl.get_ns_var("coupled_dict")
                            this_ind = handle_dict.get(item_handle.item_fqid)
                            this_dict = coupled_dict.get(this_ind,{})
                    
                            if len(this_dict.keys()) > 1:
                                mdl.set_component_icon_image(item_handle, 'Xyce/coupled_inductor.svg')
                            else:
                                mdl.set_component_icon_image(item_handle, 'Xyce/not_coupled_inductor.svg')
                    
                        except: pass
                    ENDCODE

                    CODE post_resolve
                    ENDCODE
                }
            }
            [
                position = 7784, 8008
                size = 64, 64
            ]

            component Subsystem Transformer {
                layout = static
                component el_open "Open Circuit1" {
                    circuit_connector = "true"
                }
                [
                    position = 8040, 8200
                ]

                component el_open "Open Circuit2" {
                    circuit_connector = "true"
                }
                [
                    position = 8040, 8296
                ]

                port prm_1 {
                    label = "prm_1"
                    position = left top
                    kind = pe
                }
                [
                    position = 7952, 8200
                ]

                port prm_2 {
                    label = "prm_2"
                    position = left bottom
                    kind = pe
                }
                [
                    position = 7952, 8296
                ]

                port sec_2 {
                    label = "sec_2"
                    position = right bottom
                    kind = pe
                }
                [
                    position = 8128, 8296
                    scale = -1, 1
                ]

                port sec_1 {
                    label = "sec_1"
                    position = right top
                    kind = pe
                }
                [
                    position = 8128, 8200
                    scale = -1, 1
                ]

                connect prm_1 "Open Circuit1.p_node" as Connection1
                connect "Open Circuit1.n_node" sec_1 as Connection2
                connect "Open Circuit2.n_node" sec_2 as Connection3
                connect prm_2 "Open Circuit2.p_node" as Connection4

                mask {
                    icon = "image(\'trl_2w1ph.svg\')"
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Two-winding transformer.</p></body></html>"
                    help_file = "single_phase_two_winding_transformer.html"

                    n1 {
                        label = "Primary turns (N1)"
                        widget = edit
                        type = generic
                        default_value = "0"
                    }

                    n2 {
                        label = "Secondary turns (N2)"
                        widget = edit
                        type = generic
                        default_value = "0"
                    }

                    CODE init
                    ENDCODE

                    CODE pre_compile
                    ENDCODE

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE

                    CODE define_icon
                        image('trl_2w1ph.svg')
                    ENDCODE
                }
            }
            [
                position = 7472, 7960
                size = 124, 256
            ]
        }
        [
            position = 8096, 8016
            size = 96, 96
        ]

        component Category Sources {
            layout = dynamic
            component Category "Independent Sources" {
                layout = dynamic
                component Category Voltage {
                    layout = dynamic
                    component Subsystem "Exponent Voltage Source" {
                        layout = static
                        component src_voltage Vs1 {
                        }
                        [
                            position = 7904, 8064
                            rotation = right
                        ]

                        port p_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7904, 7976
                            rotation = right
                            hide_name = True
                        ]

                        port n_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7904, 8152
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        connect Vs1.p_node p_node as Connection1
                        connect Vs1.n_node n_node as Connection2

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Exponent Voltage Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"V\" type element with a \"EXP\" transient specification.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The output starts at the V1 voltage. At TD1 seconds, it rises exponentially to V2 according to TAU1. At TD2 seconds, it falls exponentially towards V1 according to TAU2.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The following equations describe the waveform:<br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">0 < t < TD1:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">V(t) = V1 </p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">TD1 < t < TD2:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">V(t) = V1 + (V2-V1)(1-exp(-(t-TD1)/TAU1))     [Eq1]</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">t > TD2:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">V(t) = Eq1 + (V1-V2)(1-exp(-(t-TD2)/TAU2))</p></body></html>"

                            V1 {
                                label = "Initial amplitude (V1)"
                                widget = edit
                                type = generic
                                default_value = "-50"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            V2 {
                                label = "Final amplitude (V2)"
                                widget = edit
                                type = generic
                                default_value = "50"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            TD1 {
                                label = "Rise delay time (TD1)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            TAU1 {
                                label = "Rise time constant (TAU1)"
                                widget = edit
                                type = generic
                                default_value = "0.005"
                            }

                            TD2 {
                                label = "Fall delay time (TD2)"
                                widget = edit
                                type = generic
                                default_value = "0.025"
                                unit = "s"
                            }

                            TAU2 {
                                label = "Fall time constant (TAU2)"
                                widget = edit
                                type = generic
                                default_value = "0.01"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                            
                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()
                            
                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/vs_exp.svg')
                            
                                V1 = mdl.prop(item_handle, "V1")
                                V2 = mdl.prop(item_handle, "V2")
                                min = mdl.get_property_value(V1)
                                max = mdl.get_property_value(V2)
                            
                                min_text = f"{min} V"
                                max_text = f"{max} V"
                            
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, min_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                                mdl.disp_component_icon_text(item_handle, max_text, relpos_x = 0.5, relpos_y = 0.12, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 7688, 8216
                        rotation = left
                        size = 64, 64
                    ]

                    component Subsystem "Pulse Voltage Source" {
                        layout = static
                        component src_voltage Vs1 {
                        }
                        [
                            position = 7920, 8032
                            rotation = right
                        ]

                        port n_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7920, 8120
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        port p_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7920, 7952
                            rotation = right
                            hide_name = True
                        ]

                        connect Vs1.n_node n_node as Connection2
                        connect Vs1.p_node p_node as Connection1

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Pulse Voltage Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"V\" type element with a \"PULSE\" transient specification.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The source output starts at the value defined by V1 and immediately rises to V2 according to TR. After PW seconds, it starts falling back to V1 according to TF. At PER seconds, it returns immediately to V1 and a new period starts.</p></body></html>"

                            V1 {
                                label = "Initial value (V1)"
                                widget = edit
                                type = generic
                                default_value = "-1"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            V2 {
                                label = "Pulse value (V2)"
                                widget = edit
                                type = generic
                                default_value = "1"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            TD {
                                label = "Delay time (TD)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            TR {
                                label = "Rise time (TR)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            TF {
                                label = "Fall time (TF)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            PW {
                                label = "Pulse width (PW)"
                                widget = edit
                                type = generic
                                default_value = "0.0125"
                                unit = "s"
                            }

                            PER {
                                label = "Period (PER)"
                                widget = edit
                                type = generic
                                default_value = "0.025"
                                unit = "s"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                            
                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()
                            
                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/vs_pulse.svg')
                            
                                V1 = mdl.prop(item_handle, "V1")
                                V2 = mdl.prop(item_handle, "V2")
                                min = mdl.get_property_value(V1)
                                max = mdl.get_property_value(V2)
                            
                                min_text = f"{min} V"
                                max_text = f"{max} V"
                            
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, min_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                                mdl.disp_component_icon_text(item_handle, max_text, relpos_x = 0.5, relpos_y = 0.12, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 7456, 8216
                        rotation = left
                        size = 64, 64
                    ]

                    component Subsystem "DC Voltage Source" {
                        layout = static
                        component src_voltage Vs1 {
                        }
                        [
                            position = 7904, 8064
                            rotation = right
                        ]

                        port n_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7904, 8160
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        port p_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7904, 7960
                            rotation = right
                            hide_name = True
                        ]

                        connect Vs1.n_node n_node as Connection2
                        connect Vs1.p_node p_node as Connection1

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">DC Voltage Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"V\" type element with a constant value as transient specification (voltage).</p></body></html>"

                            voltage {
                                label = "Voltage"
                                widget = edit
                                type = generic
                                default_value = "100"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                            
                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()
                            
                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/vs_dc.svg')
                            
                                voltage = mdl.prop(item_handle, "voltage")
                                vdc = mdl.get_property_value(voltage)
                            
                                vdc_text = f"{vdc} V"
                            
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, vdc_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 7456, 8072
                        rotation = left
                        size = 64, 64
                    ]

                    component Subsystem "AC Voltage Source" {
                        layout = static
                        component src_voltage Vs1 {
                        }
                        [
                            position = 7904, 8064
                            rotation = right
                        ]

                        port n_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7904, 8144
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        port p_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7904, 7992
                            rotation = right
                            hide_name = True
                        ]

                        connect Vs1.n_node n_node as Connection2
                        connect p_node Vs1.p_node as Connection1

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">AC Voltage Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"V\" type element with a \"SIN\" transient specification.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If a positive Delay is set, the source will output a constant voltage for TD seconds. Negative values are also accepted.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The sine wave is multiplied to the expression exp(-THETA*(t-TD)).</p></body></html>"

                            VA {
                                label = "Amplitude (VA)"
                                widget = edit
                                type = generic
                                default_value = "311"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            FREQ {
                                label = "Frequency (FREQ)"
                                widget = edit
                                type = generic
                                default_value = "50"
                                unit = "Hz"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            PHASE {
                                label = "Phase (PHASE)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "°"
                            }

                            V0 {
                                label = "Offset (V0)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "V"
                            }

                            TD {
                                label = "Delay (TD)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            THETA {
                                label = "Attenuation Factor (THETA)"
                                widget = edit
                                type = generic
                                default_value = "0"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                            
                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()
                            
                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/vs_ac.svg')
                            
                                VA = mdl.prop(item_handle, "VA")
                                FREQ = mdl.prop(item_handle, "FREQ")
                                amplitude = mdl.get_property_value(VA)
                                frequency = mdl.get_property_value(FREQ)
                            
                                amp_text = f"{amplitude} V"
                                freq_text = f"{frequency} Hz"
                            
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, freq_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                                mdl.disp_component_icon_text(item_handle, amp_text, relpos_x = 0.5, relpos_y = 0.12, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 7688, 8072
                        rotation = left
                        size = 64, 64
                    ]

                    component Subsystem "Triangular Voltage Source" {
                        layout = static
                        component src_voltage Vs1 {
                        }
                        [
                            position = 7920, 8032
                            rotation = right
                        ]

                        port p_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7920, 7952
                            rotation = right
                            hide_name = True
                        ]

                        port n_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7920, 8120
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        connect Vs1.p_node p_node as Connection1
                        connect Vs1.n_node n_node as Connection2

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Triangular Voltage Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"V\" type element with a \"PWL\" (piecewise-linear) transient specification.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The output starts at VMIN and rises linearly to VMAX, reaching it after TR seconds. The output then decreases linearly to VMIN during TF seconds.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The frequency of the triangular wave is defined therefore by inverse of (TR+TF).</p></body></html>"

                            vmax {
                                label = "Maximum voltage (VMAX)"
                                widget = edit
                                type = generic
                                default_value = "1"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            vmin {
                                label = "Minimum voltage (VMIN)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            trise {
                                label = "Rise-time (TR)"
                                widget = edit
                                type = generic
                                default_value = "0.5"
                                unit = "s"
                            }

                            tfall {
                                label = "Fall-time (TF)"
                                widget = edit
                                type = generic
                                default_value = "0.5"
                                unit = "s"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                            
                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()
                            
                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/vs_triangular.svg')
                            
                                VMIN = mdl.prop(item_handle, "vmin")
                                VMAX = mdl.prop(item_handle, "vmax")
                                min = mdl.get_property_value(VMIN)
                                max = mdl.get_property_value(VMAX)
                            
                                min_text = f"{min} V"
                                max_text = f"{max} V"
                            
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, min_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                                mdl.disp_component_icon_text(item_handle, max_text, relpos_x = 0.5, relpos_y = 0.12, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 7456, 8344
                        rotation = left
                        size = 64, 64
                    ]
                }
                [
                    position = 10504, 10408
                    size = 48, 48
                ]

                component Category Current {
                    layout = dynamic
                    component Subsystem "Exponent Current Source" {
                        layout = static
                        component src_current Is1 {
                        }
                        [
                            position = 7896, 8064
                            rotation = right
                        ]

                        port n_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7896, 8144
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        port p_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7896, 7968
                            rotation = right
                            hide_name = True
                        ]

                        connect Is1.n_node n_node as Connection2
                        connect p_node Is1.p_node as Connection1

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Exponent Current Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"I\" type element with a \"EXP\" transient specification.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The output starts at the V1* current. At TD1 seconds, it rises exponentially to V2 according to TAU1. At TD2 seconds, it falls exponentially towards V1 according to TAU2.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">*This is the nomenclature used by Xyce.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The following equations describe the waveform:<br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">0 < t < TD1:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">I(t) = V1 </p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">TD1 < t < TD2:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">I(t) = V1 + (V2-V1)(1-exp(-(t-TD1)/TAU1))     [Eq1]</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">t > TD2:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">I(t) = Eq1 + (V1-V2)(1-exp(-(t-TD2)/TAU2))</p></body></html>"

                            V1 {
                                label = "Initial amplitude (V1)"
                                widget = edit
                                type = generic
                                default_value = "-5"
                                unit = "A"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            V2 {
                                label = "Final amplitude (V2)"
                                widget = edit
                                type = generic
                                default_value = "5"
                                unit = "A"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            TD1 {
                                label = "Rise delay time (TD1)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            TAU1 {
                                label = "Rise time constant (TAU1)"
                                widget = edit
                                type = generic
                                default_value = "0.01"
                            }

                            TD2 {
                                label = "Delay fall time (TD2)"
                                widget = edit
                                type = generic
                                default_value = "0.025"
                                unit = "s"
                            }

                            TAU2 {
                                label = "Fall time constant (TAU2)"
                                widget = edit
                                type = generic
                                default_value = "0.01"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                            
                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()
                            
                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/cs_exp.svg')
                            
                                V1 = mdl.prop(item_handle, "V1")
                                V2 = mdl.prop(item_handle, "V2")
                                min = mdl.get_property_value(V1)
                                max = mdl.get_property_value(V2)
                            
                                min_text = f"{min} A"
                                max_text = f"{max} A"
                            
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, min_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                                mdl.disp_component_icon_text(item_handle, max_text, relpos_x = 0.5, relpos_y = 0.12, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 7896, 8184
                        rotation = left
                        size = 64, 64
                    ]

                    component Subsystem "AC Current Source" {
                        layout = static
                        component src_current Is1 {
                        }
                        [
                            position = 7904, 8064
                            rotation = right
                        ]

                        port n_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7904, 8144
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        port p_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7904, 7984
                            rotation = right
                            hide_name = True
                        ]

                        connect p_node Is1.p_node as Connection1
                        connect Is1.n_node n_node as Connection2

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">AC Current Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"I\" type element with a \"SIN\" transient specification.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If a positive Delay is set, the source will output a constant current for TD seconds. Negative values are also accepted.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The sine wave is multiplied to the expression exp(-THETA*(t-TD)).</p></body></html>"

                            VA {
                                label = "Amplitude (VA)"
                                widget = edit
                                type = generic
                                default_value = "1"
                                unit = "A"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            FREQ {
                                label = "Frequency (FREQ)"
                                widget = edit
                                type = generic
                                default_value = "50"
                                unit = "Hz"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            PHASE {
                                label = "Phase (PHASE)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "°"
                            }

                            V0 {
                                label = "Offset (V0)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "A"
                            }

                            TD {
                                label = "Delay (TD)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            THETA {
                                label = "Attenuation Factor (THETA)"
                                widget = edit
                                type = generic
                                default_value = "0"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                            
                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()
                            
                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/cs_ac.svg')
                            
                                VA = mdl.prop(item_handle, "VA")
                                FREQ = mdl.prop(item_handle, "FREQ")
                                amplitude = mdl.get_property_value(VA)
                                frequency = mdl.get_property_value(FREQ)
                            
                                amp_text = f"{amplitude} A"
                                freq_text = f"{frequency} Hz"
                            
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, freq_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                                mdl.disp_component_icon_text(item_handle, amp_text, relpos_x = 0.5, relpos_y = 0.12, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 8152, 8080
                        rotation = left
                        size = 64, 64
                    ]

                    component Subsystem "DC Current Source" {
                        layout = static
                        component src_current Is1 {
                        }
                        [
                            position = 7896, 8064
                            rotation = right
                        ]

                        port p_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7896, 7968
                            rotation = right
                            hide_name = True
                        ]

                        port n_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7896, 8152
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        connect p_node Is1.p_node as Connection1
                        connect Is1.n_node n_node as Connection2

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">DC Current Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"I\" type element with a constant value as transient specification (current).</p></body></html>"

                            current {
                                label = "Current"
                                widget = edit
                                type = generic
                                default_value = "1"
                                unit = "A"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                            
                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()
                            
                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/cs_dc.svg')
                            
                                current = mdl.prop(item_handle, "current")
                                idc = mdl.get_property_value(current)
                            
                                idc_text = f"{idc} A"
                            
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, idc_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 7896, 8072
                        rotation = left
                        size = 64, 64
                    ]

                    component Subsystem "Pulse Current Source" {
                        layout = static
                        component src_current Is1 {
                        }
                        [
                            position = 7904, 8064
                            rotation = right
                        ]

                        port p_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7904, 7976
                            rotation = right
                            hide_name = True
                        ]

                        port n_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7904, 8144
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        connect Is1.n_node n_node as Connection2
                        connect Is1.p_node p_node as Connection1

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Pulse Current Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"I\" type element with a \"PULSE\" transient specification.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The source output starts at the value defined by V1* and immediately rises to V2 according to TR. After PW seconds, it starts falling back to V1 according to TF. At PER seconds, it returns immediately to V1 and a new period starts.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">*This is the nomenclature used by Xyce.</p></body></html>"

                            V1 {
                                label = "Initial value (V1)"
                                widget = edit
                                type = generic
                                default_value = "-1"
                                unit = "A"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            V2 {
                                label = "Pulse value (V2)"
                                widget = edit
                                type = generic
                                default_value = "1"
                                unit = "A"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            TD {
                                label = "Delay time (TD)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            TR {
                                label = "Rise time (TR)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            TF {
                                label = "Fall time (TF)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            PW {
                                label = "Pulse width (PW)"
                                widget = edit
                                type = generic
                                default_value = "0.0125"
                                unit = "s"
                            }

                            PER {
                                label = "Period (PER)"
                                widget = edit
                                type = generic
                                default_value = "0.025"
                                unit = "s"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                            
                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()
                            
                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/cs_pulse.svg')
                            
                                V1 = mdl.prop(item_handle, "V1")
                                V2 = mdl.prop(item_handle, "V2")
                                min = mdl.get_property_value(V1)
                                max = mdl.get_property_value(V2)
                            
                                min_text = f"{min} A"
                                max_text = f"{max} A"
                            
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, min_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                                mdl.disp_component_icon_text(item_handle, max_text, relpos_x = 0.5, relpos_y = 0.12, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 8152, 8176
                        rotation = left
                        size = 64, 64
                    ]
                }
                [
                    position = 10592, 10408
                    size = 48, 48
                ]
            }
            [
                position = 7472, 8112
                size = 96, 104
            ]

            component Category "Controlled Sources" {
                layout = dynamic
                component Subsystem "Voltage-Controlled Current Source" {
                    layout = static
                    component el_short "Short Circuit1" {
                    }
                    [
                        position = 7904, 7992
                    ]

                    component el_short "Short Circuit" {
                    }
                    [
                        position = 7904, 8064
                    ]

                    port p_ctrl {
                        label = "Ctrl+"
                        position = 12.0, -26.0
                        kind = pe
                    }
                    [
                        position = 7768, 7992
                        hide_name = True
                    ]

                    port n_ctrl {
                        label = "Ctrl-"
                        position = -12.0, -26.0
                        kind = pe
                    }
                    [
                        position = 8040, 7992
                        hide_name = True
                        scale = -1, 1
                    ]

                    port p_node {
                        label = "+"
                        position = right center
                        kind = pe
                    }
                    [
                        position = 7768, 8064
                        hide_name = True
                    ]

                    port n_node {
                        label = "-"
                        position = left center
                        kind = pe
                    }
                    [
                        position = 8040, 8064
                        hide_name = True
                        scale = -1, 1
                    ]

                    connect "Short Circuit1.n_node" n_ctrl as Connection4
                    connect p_ctrl "Short Circuit1.p_node" as Connection3
                    connect "Short Circuit.n_node" n_node as Connection2
                    connect p_node "Short Circuit.p_node" as Connection1

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Voltage-Controlled Current Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"G\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The differential voltage measured between + and - terminals controls the current output according to the transcondutance (gm) value.</p></body></html>"

                        transc {
                            label = "Transconductance"
                            widget = edit
                            type = generic
                            default_value = "1"

                            CODE property_value_changed
                                mdl.refresh_icon(container_handle)
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                        
                        ENDCODE

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, 'Xyce/vccs.svg')
                        
                            transc_prop = mdl.prop(item_handle, "transc")
                            transc = mdl.get_property_value(transc_prop)
                        
                            text = f" gm = {transc}"
                        
                            mdl.set_color(item_handle, "blue")
                            mdl.disp_component_icon_text(item_handle, text, relpos_x = 0.5, relpos_y = 0.87, size = 8)
                        ENDCODE
                    }
                }
                [
                    position = 7872, 8128
                    rotation = left
                    size = 64, 64
                ]

                component Subsystem "Current-Controlled Current Source" {
                    layout = static
                    component el_short "Short Circuit" {
                    }
                    [
                        position = 7904, 8064
                    ]

                    port p_node {
                        label = "+"
                        position = right center
                        kind = pe
                    }
                    [
                        position = 7768, 8064
                        hide_name = True
                    ]

                    port n_node {
                        label = "-"
                        position = left center
                        kind = pe
                    }
                    [
                        position = 8040, 8064
                        hide_name = True
                        scale = -1, 1
                    ]

                    connect "Short Circuit.n_node" n_node as Connection2
                    connect p_node "Short Circuit.p_node" as Connection1

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Current-Controlled Current Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"F\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A controlling current must be selected from the list of current measurements added to the circuit. The current output is controlled according to the selected current and the gain (g) value.</p></body></html>"

                        gain {
                            label = "Gain"
                            widget = edit
                            type = generic
                            default_value = "1"

                            CODE property_value_changed
                                mdl.refresh_icon(container_handle)
                            ENDCODE
                        }

                        ctrl_name {
                            label = "Controlling measurement name"
                            widget = combo
                            combo_values = "None"
                            type = string
                            default_value = "None"
                            no_evaluate

                            CODE property_value_changed
                                mdl.refresh_icon(container_handle)
                            ENDCODE
                        }

                        update_currents {
                            label = "Update current measurements"
                            widget = button
                            type = string
                            default_value = "Update"
                            no_evaluate

                            CODE button_clicked
                                update_current_measurements()
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                        
                        ENDCODE

                        CODE define_icon
                            ctrl_name_prop = mdl.prop(item_handle, "ctrl_name")
                            ctrl_name = mdl.get_property_disp_value(ctrl_name_prop)
                        
                            mdl.set_component_icon_image(item_handle, 'Xyce/cccs.svg')
                        
                            if not ctrl_name == "None":
                                mdl.set_component_icon_image(item_handle, 'Xyce/cccs_active.svg')
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, " " + ctrl_name, relpos_x = 0.5, relpos_y = 0.87, size = 8)
                        ENDCODE

                        CODE init
                            def update_current_measurements():
                                i_list = []
                        
                                for item in mdl.get_items():
                                    try: # Not every component has a type
                                        if mdl.get_component_type_name(item) == "Current Measurement":
                                            i_list.append(item.fqn.split(".")[0])
                                    except AttributeError: pass
                        
                                for item in mdl.get_items():
                                    try: # Not every component has a type
                                        if mdl.get_component_type_name(item) == "Current-Controlled Current Source":
                                            ctrl_name_prop = mdl.prop(item, "ctrl_name")
                                            mdl.set_property_combo_values(ctrl_name_prop, i_list)
                                            displayed_ctrl = mdl.get_property_disp_value(ctrl_name_prop)
                                            if displayed_ctrl not in i_list:
                                                mdl.set_property_value(ctrl_name_prop, "None")
                                                mdl.refresh_icon(item)
                                    except AttributeError: pass
                        
                            update_current_measurements()
                        ENDCODE
                    }
                }
                [
                    position = 7872, 8248
                    rotation = left
                    size = 64, 64
                ]

                component Subsystem "Current-Controlled Voltage Source" {
                    layout = static
                    component el_short "Short Circuit" {
                    }
                    [
                        position = 7904, 8064
                    ]

                    port n_node {
                        label = "-"
                        position = left center
                        kind = pe
                    }
                    [
                        position = 8040, 8064
                        hide_name = True
                        scale = -1, 1
                    ]

                    port p_node {
                        label = "+"
                        position = right center
                        kind = pe
                    }
                    [
                        position = 7768, 8064
                        hide_name = True
                    ]

                    connect "Short Circuit.n_node" n_node as Connection2
                    connect p_node "Short Circuit.p_node" as Connection1

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Current-Controlled Voltage Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"H\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A controlling current must be selected from the list of current measurements added to the circuit. The voltage output is controlled according to the selected current and the transresistance (rm) value. </p></body></html>"

                        transr {
                            label = "Transresistance"
                            widget = edit
                            type = generic
                            default_value = "1"

                            CODE property_value_changed
                                refresh_all_ccvs_icons()
                            ENDCODE
                        }

                        ctrl_name {
                            label = "Controlling measurement name"
                            widget = combo
                            combo_values = "None"
                            type = string
                            default_value = "None"
                            no_evaluate

                            CODE property_value_changed
                                refresh_all_ccvs_icons()
                            ENDCODE
                        }

                        update_currents {
                            label = "Update current measurements"
                            widget = button
                            type = string
                            default_value = "Update"
                            no_evaluate

                            CODE button_clicked
                                update_current_measurements()
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                        
                        ENDCODE

                        CODE define_icon
                            ctrl_name_prop = mdl.prop(item_handle, "ctrl_name")
                            ctrl_name = mdl.get_property_disp_value(ctrl_name_prop)
                        
                            mdl.set_component_icon_image(item_handle, 'Xyce/ccvs.svg')
                        
                            if not ctrl_name == "None":
                                mdl.set_component_icon_image(item_handle, 'Xyce/ccvs_active.svg')
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, " " + ctrl_name, relpos_x = 0.5, relpos_y = 0.87, size = 8)
                        ENDCODE

                        CODE init
                            def update_current_measurements():
                                i_list = []
                        
                                for item in mdl.get_items():
                                    try: # Not every component has a type
                                        if mdl.get_component_type_name(item) == "Current Measurement":
                                            i_list.append(item.fqn.split(".")[0])
                                    except AttributeError: pass
                        
                                for item in mdl.get_items():
                                    try: # Not every component has a type
                                        if mdl.get_component_type_name(item) == "Current-Controlled Voltage Source":
                                            ctrl_name_prop = mdl.prop(item, "ctrl_name")
                                            mdl.set_property_combo_values(ctrl_name_prop, i_list)
                                            displayed_ctrl = mdl.get_property_disp_value(ctrl_name_prop)
                                            if displayed_ctrl not in i_list:
                                                mdl.set_property_value(ctrl_name_prop, "None")
                                    except AttributeError: pass
                        
                            def refresh_all_ccvs_icons():
                                for item in mdl.get_items():
                                    try: # Not every component has a type
                                        if mdl.get_component_type_name(item) == "Current-Controlled Voltage Source":
                                            mdl.refresh_icon(item)
                                    except AttributeError: pass
                        
                            update_current_measurements()
                        ENDCODE
                    }
                }
                [
                    position = 8232, 8248
                    rotation = left
                    size = 64, 64
                ]

                component Subsystem "Voltage-Controlled Voltage Source" {
                    layout = static
                    component el_short "Short Circuit" {
                    }
                    [
                        position = 7848, 8064
                    ]

                    component el_short "Short Circuit1" {
                    }
                    [
                        position = 7848, 7968
                    ]

                    component el_short "Short Circuit2" {
                    }
                    [
                        position = 7976, 8016
                        rotation = right
                    ]

                    port p_node {
                        label = "+"
                        position = right center
                        kind = pe
                    }
                    [
                        position = 7768, 8064
                        hide_name = True
                    ]

                    port n_ctrl {
                        label = "Ctrl-"
                        position = -12.0, -25.0
                        kind = pe
                    }
                    [
                        position = 8040, 7968
                        hide_name = True
                        scale = -1, 1
                    ]

                    port n_node {
                        label = "-"
                        position = left center
                        kind = pe
                    }
                    [
                        position = 8040, 8064
                        hide_name = True
                        scale = -1, 1
                    ]

                    port p_ctrl {
                        label = "Ctrl+"
                        position = 12.0, -25.0
                        kind = pe
                    }
                    [
                        position = 7768, 7968
                        hide_name = True
                    ]

                    junction Junction1 pe
                    [
                        position = 7976, 7968
                    ]

                    junction Junction2 pe
                    [
                        position = 7976, 8064
                    ]

                    connect p_ctrl "Short Circuit1.p_node" as Connection3
                    connect p_node "Short Circuit.p_node" as Connection1
                    connect "Short Circuit1.n_node" Junction1 as Connection5
                    connect Junction1 n_ctrl as Connection6
                    connect "Short Circuit2.p_node" Junction1 as Connection7
                    connect "Short Circuit.n_node" Junction2 as Connection8
                    connect Junction2 n_node as Connection9
                    connect "Short Circuit2.n_node" Junction2 as Connection10

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Voltage-Controlled Voltage Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"E\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The differential voltage measured between + and - terminals controls the voltage output according to the gain (g) value.</p></body></html>"

                        gain {
                            label = "Gain"
                            widget = edit
                            type = generic
                            default_value = "1"

                            CODE property_value_changed
                                mdl.refresh_icon(container_handle)
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                        
                        ENDCODE

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, 'Xyce/vcvs.svg')
                        
                            gain_prop = mdl.prop(item_handle, "gain")
                            gain = mdl.get_property_value(gain_prop)
                        
                            text = f" g = {gain}"
                        
                            mdl.set_color(item_handle, "blue")
                            mdl.disp_component_icon_text(item_handle, text, relpos_x = 0.5, relpos_y = 0.87, size = 8)
                        ENDCODE
                    }
                }
                [
                    position = 8232, 8128
                    rotation = left
                    size = 64, 64
                ]
            }
            [
                position = 7672, 8112
                size = 96, 104
            ]
        }
        [
            position = 7872, 8016
            size = 96, 104
        ]

        component Category "Transmission Lines" {
            layout = dynamic
            component Subsystem "Lossy Transmission Line" {
                layout = static
                component el_short "Short Circuit1" {
                }
                [
                    position = 7904, 7992
                ]

                component el_short "Short Circuit" {
                }
                [
                    position = 7904, 8064
                ]

                port P1_n {
                    label = "P1-"
                    position = -64.0, 20.0
                    kind = pe
                }
                [
                    position = 7768, 8064
                ]

                port P2_n {
                    label = "P2-"
                    position = 64.0, 20.0
                    kind = pe
                }
                [
                    position = 8040, 8064
                    scale = -1, 1
                ]

                port P1_p {
                    label = "P1+"
                    position = -64.0, -20.0
                    kind = pe
                }
                [
                    position = 7768, 7992
                ]

                port P2_p {
                    label = "P2+"
                    position = 64.0, -20.0
                    kind = pe
                }
                [
                    position = 8040, 7992
                    scale = -1, 1
                ]

                connect "Short Circuit.n_node" P2_n as Connection2
                connect "Short Circuit1.n_node" P2_p as Connection4
                connect P1_n "Short Circuit.p_node" as Connection1
                connect P1_p "Short Circuit1.p_node" as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Lossy Transmission Line</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"O\" type element, a distributed parameters line model.</p></body></html>"

                    LEN {
                        label = "Line length"
                        widget = edit
                        type = generic
                        default_value = "500"
                        unit = "m"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    R {
                        label = "Resistance per meter"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        unit = "Ω/m"
                    }

                    C {
                        label = "Capacitance per meter"
                        widget = edit
                        type = generic
                        default_value = "10n"
                        unit = "C/m"
                    }

                    L {
                        label = "Inductance per meter"
                        widget = edit
                        type = generic
                        default_value = "100n"
                        unit = "L/m"
                    }

                    interp {
                        label = "Interpolation Type"
                        widget = combo
                        combo_values = "Quadratic", "Mixed", "Linear"
                        type = string
                        default_value = "Quadratic"
                        group = "Advanced"
                        no_evaluate
                    }

                    steplimit {
                        label = "Can reduce time-step for accuracy"
                        widget = checkbox
                        type = bool
                        default_value = "True"
                        group = "Advanced"
                        no_evaluate
                    }

                    complexstepcontrol {
                        label = "Step control by LTE estimation"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Advanced"
                        no_evaluate
                    }

                    rel {
                        label = "Relat. rate of change of derivative for breakpoint"
                        widget = edit
                        type = generic
                        default_value = "1"
                        group = "Advanced"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/lossy_tl.svg')
                    
                        ignore = False
                        def unit_conv(value, unit):
                            if value == 0:
                                pass
                            elif value < 1e-9:
                                value = value * 1e12
                                unit = "p" + unit
                            elif value < 1e-6:
                                value = value * 1e9
                                unit = "n" + unit
                            elif value < 1e-3:
                                value = value * 1e6
                                unit = "μ" + unit
                            elif value < 1:
                                value = value * 1e3
                                unit = "m" + unit
                            elif value < 1e3:
                                pass
                            elif value < 1e6:
                                value = value * 1e-3
                                unit = "k" + unit
                            elif value < 1e9:
                                value = value * 1e-6
                                unit = "M" + unit
                            elif value < 1e12:
                                value = value * 1e-9
                                unit = "G" + unit
                            return (value, unit)
                    
                        def prefix_to_scientific(prefix):
                            if prefix == "p":
                                return "e-12"
                            if prefix == "n":
                                return "e-9"
                            if prefix == "u":
                                return "e-6"
                            if prefix == "m":
                                return "e-3"
                            if prefix == "k":
                                return "e3"
                            if prefix == "M":
                                return "e6"
                            if prefix == "G":
                                return "e9"
                    
                        def get_text(prop_handle, unit):
                            val = mdl.get_property_value(prop_handle)
                            # If val is not a string
                            if not isinstance(val, str):
                                val, unit = unit_conv(val, unit)
                                color = "blue"
                                inside_text = f"{val} {unit}"
                                return (inside_text, color)
                            # In case a variable (or a unit prefix) is being used
                            else:
                                try:
                                    import re
                                    matching = re.match(r"([0-9.]+)\s*(p|n|u|m|k|M|G)", val)
                                    if matching.group(2):
                                        nonlocal ignore
                                        n_val = matching.group(1) + prefix_to_scientific(matching.group(2))
                                        # The property must have mdl.refresh_icon(container_handle) in property_value_edited
                                        mdl.set_property_value(prop_handle, n_val)
                                        ignore = True
                                        return ("", "")
                                except:
                                    color = "green"
                                    inside_text = f"{val}"
                                    return (inside_text, color)
                    
                        len_prop = mdl.prop(item_handle, "LEN")
                        len_text, color = get_text(len_prop, "m")
                    
                        if not ignore == True:
                            mdl.set_color(item_handle, color)
                            mdl.disp_component_icon_text(item_handle, len_text, relpos_x = 0.5, relpos_y = 0.5, size = 8)
                    ENDCODE
                }
            }
            [
                position = 7856, 8000
                size = 128, 64
            ]

            component Subsystem "Lumped Transmission Line" {
                layout = static
                component el_short "Short Circuit1" {
                }
                [
                    position = 7904, 7992
                ]

                port P1_p {
                    label = "P1+"
                    position = left center
                    kind = pe
                }
                [
                    position = 7768, 7992
                ]

                port P2_p {
                    label = "P2+"
                    position = right center
                    kind = pe
                }
                [
                    position = 8040, 7992
                    scale = -1, 1
                ]

                connect P1_p "Short Circuit1.p_node" as Connection3
                connect "Short Circuit1.n_node" P2_p as Connection4

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Lumped Transmission Line</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"ytransline\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The Lumped Transmission Line approximates the line by a series of RLC sections.</p></body></html>"

                    LEN {
                        label = "Line length"
                        widget = edit
                        type = generic
                        default_value = "500"
                        unit = "m"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    R {
                        label = "Resistance per meter"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        unit = "Ω/m"
                    }

                    C {
                        label = "Capacitance per meter"
                        widget = edit
                        type = generic
                        default_value = "10e-9"
                        unit = "C/m"
                    }

                    L {
                        label = "Inductance per meter"
                        widget = edit
                        type = generic
                        default_value = "100e-9"
                        unit = "L/m"
                    }

                    LUMPS {
                        label = "Number of sections"
                        widget = edit
                        type = generic
                        default_value = "50"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/lumped_tl.svg')
                    
                        ignore = False
                        def unit_conv(value, unit):
                            if value == 0:
                                pass
                            elif value < 1e-9:
                                value = value * 1e12
                                unit = "p" + unit
                            elif value < 1e-6:
                                value = value * 1e9
                                unit = "n" + unit
                            elif value < 1e-3:
                                value = value * 1e6
                                unit = "μ" + unit
                            elif value < 1:
                                value = value * 1e3
                                unit = "m" + unit
                            elif value < 1e3:
                                pass
                            elif value < 1e6:
                                value = value * 1e-3
                                unit = "k" + unit
                            elif value < 1e9:
                                value = value * 1e-6
                                unit = "M" + unit
                            elif value < 1e12:
                                value = value * 1e-9
                                unit = "G" + unit
                            return (value, unit)
                    
                        def prefix_to_scientific(prefix):
                            if prefix == "p":
                                return "e-12"
                            if prefix == "n":
                                return "e-9"
                            if prefix == "u":
                                return "e-6"
                            if prefix == "m":
                                return "e-3"
                            if prefix == "k":
                                return "e3"
                            if prefix == "M":
                                return "e6"
                            if prefix == "G":
                                return "e9"
                    
                        def get_text(prop_handle, unit):
                            val = mdl.get_property_value(prop_handle)
                            # If val is not a string
                            if not isinstance(val, str):
                                val, unit = unit_conv(val, unit)
                                color = "blue"
                                inside_text = f"{val} {unit}"
                                return (inside_text, color)
                            # In case a variable (or a unit prefix) is being used
                            else:
                                try:
                                    import re
                                    matching = re.match(r"([0-9.]+)\s*(p|n|u|m|k|M|G)", val)
                                    if matching.group(2):
                                        nonlocal ignore
                                        n_val = matching.group(1) + prefix_to_scientific(matching.group(2))
                                        # The property must have mdl.refresh_icon(container_handle) in property_value_edited
                                        mdl.set_property_value(prop_handle, n_val)
                                        ignore = True
                                        return ("", "")
                                except:
                                    color = "green"
                                    inside_text = f"{val}"
                                    return (inside_text, color)
                    
                        len_prop = mdl.prop(item_handle, "LEN")
                        lumps_prop = mdl.prop(item_handle, "LUMPS")
                    
                        len_text, color_len = get_text(len_prop, "m")
                        lumps_text, color_lumps = get_text(lumps_prop, "")
                    
                        if not ignore == True:
                            mdl.set_color(item_handle, color_len)
                            mdl.disp_component_icon_text(item_handle, len_text, relpos_x = 0.5, relpos_y = 0.11, size = 8)
                            mdl.set_color(item_handle, color_lumps)
                            mdl.disp_component_icon_text(item_handle, "x"+lumps_text, relpos_x = 0.5, relpos_y = 0.5, size = 8)
                    ENDCODE
                }
            }
            [
                position = 8056, 8000
                size = 64, 64
            ]

            component Subsystem "Ideal Transmission Line" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7904, 8064
                ]

                component el_short "Short Circuit1" {
                }
                [
                    position = 7904, 7992
                ]

                port P1_p {
                    label = "P1+"
                    position = -64.0, -20.0
                    kind = pe
                }
                [
                    position = 7768, 7992
                ]

                port P1_n {
                    label = "P1-"
                    position = -64.0, 20.0
                    kind = pe
                }
                [
                    position = 7768, 8064
                ]

                port P2_p {
                    label = "P2+"
                    position = 64.0, -20.0
                    kind = pe
                }
                [
                    position = 8040, 7992
                    scale = -1, 1
                ]

                port P2_n {
                    label = "P2-"
                    position = 64.0, 20.0
                    kind = pe
                }
                [
                    position = 8040, 8064
                    scale = -1, 1
                ]

                connect P1_n "Short Circuit.p_node" as Connection1
                connect "Short Circuit.n_node" P2_n as Connection2
                connect "Short Circuit1.n_node" P2_p as Connection4
                connect P1_p "Short Circuit1.p_node" as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Ideal Transmission Line</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"T\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The line length is indirectly defined by the time delay (TD).</p></body></html>"

                    Z0 {
                        label = "Characteristic Impedance (Z0)"
                        widget = edit
                        type = generic
                        default_value = "50"
                        unit = "Ω"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    TD {
                        label = "Delay"
                        widget = edit
                        type = generic
                        default_value = "10e-3"
                        unit = "s"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/ideal_tl.svg')
                    
                        ignore = False
                        def unit_conv(value, unit):
                            if value == 0:
                                pass
                            elif value < 1e-9:
                                value = value * 1e12
                                unit = "p" + unit
                            elif value < 1e-6:
                                value = value * 1e9
                                unit = "n" + unit
                            elif value < 1e-3:
                                value = value * 1e6
                                unit = "μ" + unit
                            elif value < 1:
                                value = value * 1e3
                                unit = "m" + unit
                            elif value < 1e3:
                                pass
                            elif value < 1e6:
                                value = value * 1e-3
                                unit = "k" + unit
                            elif value < 1e9:
                                value = value * 1e-6
                                unit = "M" + unit
                            elif value < 1e12:
                                value = value * 1e-9
                                unit = "G" + unit
                            return (value, unit)
                    
                        def prefix_to_scientific(prefix):
                            if prefix == "p":
                                return "e-12"
                            if prefix == "n":
                                return "e-9"
                            if prefix == "u":
                                return "e-6"
                            if prefix == "m":
                                return "e-3"
                            if prefix == "k":
                                return "e3"
                            if prefix == "M":
                                return "e6"
                            if prefix == "G":
                                return "e9"
                    
                        def get_text(prop_handle, unit):
                            val = mdl.get_property_value(prop_handle)
                            # If val is not a string
                            if not isinstance(val, str):
                                val, unit = unit_conv(val, unit)
                                color = "blue"
                                inside_text = f"{val} {unit}"
                                return (inside_text, color)
                            # In case a variable (or a unit prefix) is being used
                            else:
                                try:
                                    import re
                                    matching = re.match(r"([0-9.]+)\s*(p|n|u|m|k|M|G)", val)
                                    if matching.group(2):
                                        nonlocal ignore
                                        n_val = matching.group(1) + prefix_to_scientific(matching.group(2))
                                        # The property must have mdl.refresh_icon(container_handle) in property_value_edited
                                        mdl.set_property_value(prop_handle, n_val)
                                        ignore = True
                                        return ("", "")
                                except:
                                    color = "green"
                                    inside_text = f"{val}"
                                    return (inside_text, color)
                    
                        TD_prop = mdl.prop(item_handle, "TD")
                        Z0_prop = mdl.prop(item_handle, "Z0")
                    
                        TD_text, color1 = get_text(TD_prop, "s")
                        Z0_text, color2 = get_text(Z0_prop, "Ω")
                    
                        if not ignore == True:
                            mdl.set_color(item_handle, color1)
                            mdl.disp_component_icon_text(item_handle, TD_text, relpos_x = 0.7, relpos_y = 0.5, size = 8, trim_factor = 0.4)
                            mdl.set_color(item_handle, color2)
                            mdl.disp_component_icon_text(item_handle, Z0_text, relpos_x = 0.3, relpos_y = 0.5, size = 8, trim_factor = 0.4)
                    ENDCODE

                    CODE post_resolve
                    ENDCODE
                }
            }
            [
                position = 7616, 8000
                size = 128, 64
            ]
        }
        [
            position = 8096, 8208
            size = 96, 104
        ]

        component Category Electronics {
            layout = dynamic
            component Subsystem "Operational Amplifier" {
                layout = static
                component "xyce_lib/Ideal Resistor" Rin {
                    R = "10e6"
                }
                [
                    position = 7912, 8168
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Voltage-Controlled Voltage Source" Gain {
                    gain = "gain"
                }
                [
                    position = 8040, 8168
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Ideal Capacitor" Cf {
                    C = "Cf"
                }
                [
                    position = 8272, 8176
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Ideal Resistor" Rf {
                    R = "Rf"
                }
                [
                    position = 8152, 8112
                    size = 64, 64
                ]

                component "xyce_lib/Voltage-Controlled Voltage Source" Eout {
                    gain = "gain"
                }
                [
                    position = 8408, 8176
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Ideal Resistor" RGND2 {
                    R = "1"
                }
                [
                    position = 8408, 8296
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Ideal Resistor" RGND {
                    R = "1"
                }
                [
                    position = 8040, 8296
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Ideal Resistor" Rout {
                }
                [
                    position = 8512, 8112
                    size = 64, 64
                ]

                component src_ground gnd1 {
                }
                [
                    position = 8248, 8400
                ]

                port - {
                    position = -32.0, 20.0
                    kind = pe
                }
                [
                    position = 7832, 8240
                    hide_name = True
                ]

                port + {
                    position = -32.0, -20.0
                    kind = pe
                }
                [
                    position = 7832, 8112
                    hide_name = True
                ]

                port Out {
                    position = right center
                    kind = pe
                }
                [
                    position = 8608, 8112
                    rotation = down
                    hide_name = True
                ]

                junction Junction8 pe
                [
                    position = 8272, 8112
                ]

                junction Junction11 pe
                [
                    position = 7912, 8112
                ]

                junction Junction12 pe
                [
                    position = 7912, 8240
                ]

                junction Junction14 pe
                [
                    position = 8248, 8344
                ]

                junction Junction15 pe
                [
                    position = 8040, 8232
                ]

                junction Junction16 pe
                [
                    position = 8272, 8232
                ]

                connect Gain.p_node Rf.n_node as Connection92
                connect Rf.p_node Junction8 as Connection106
                connect Junction8 Cf.p_node as Connection107
                [
                    position = 0, 0
                    breakpoints = 8272, 8112
                ]
                connect Eout.p_ctrl Junction8 as Connection108
                [
                    position = 0, 0
                    breakpoints = 8360, 8160; 8360, 8112
                ]
                connect Rout.p_node Out as Connection109
                connect Rout.n_node Eout.p_node as Connection110
                connect + Junction11 as Connection138
                connect Junction11 Gain.p_ctrl as Connection139
                connect Rin.p_node Junction11 as Connection140
                connect Rin.n_node Junction12 as Connection142
                connect Junction12 Gain.n_ctrl as Connection143
                [
                    position = 0, 0
                    breakpoints = 7912, 8240; 7992, 8240; 7992, 8184
                ]
                connect - Junction12 as Connection144
                connect RGND2.p_node Eout.n_node as Connection146
                connect gnd1.node Junction14 as Connection150
                connect Junction14 RGND2.n_node as Connection151
                connect RGND.n_node Junction14 as Connection152
                [
                    position = 0, 0
                    breakpoints = 8040, 8344; 8248, 8344
                ]
                connect RGND.p_node Junction15 as Connection155
                [
                    position = 0, 0
                    breakpoints = 8040, 8248
                ]
                connect Junction15 Gain.n_node as Connection156
                connect Cf.n_node Junction16 as Connection158
                connect Junction16 Junction15 as Connection159
                connect Eout.n_ctrl Junction16 as Connection160
                [
                    position = 0, 0
                    breakpoints = 8360, 8192; 8360, 8232
                ]

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Operational Amplifier</p></body></html>"

                    model_type {
                        label = "Model type"
                        widget = combo
                        combo_values = "Ideal", "Low-pass filter"
                        type = string
                        default_value = "Ideal"
                        no_evaluate
                    }

                    gain {
                        label = "Large Signal Gain"
                        widget = edit
                        type = generic
                        default_value = "1000000"
                        unit = "V/V"
                    }

                    Rf {
                        label = "Rf"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        unit = "ohms"

                        CODE property_value_changed
                            new_filter_cap()
                        ENDCODE
                    }

                    Cf {
                        label = "Cf"
                        widget = edit
                        type = generic
                        default_value = "1.5915494309188487e-05"
                        unit = "F"
                        nonvisible
                    }

                    fp {
                        label = "Filter pole frequency"
                        widget = edit
                        type = generic
                        default_value = "10"
                        unit = "Hz"

                        CODE property_value_changed
                            new_filter_cap()
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/op_amp.svg')
                    ENDCODE

                    CODE init
                        def new_filter_cap():
                            fp_prop = mdl.prop(item_handle, "fp")
                            fp = mdl.get_property_value(fp_prop)
                    
                            Rf_prop = mdl.prop(item_handle, "Rf")
                            Rf = mdl.get_property_value(Rf_prop)
                    
                            try:
                                pi = 3.14159265359
                                cap = 1/(2*pi*fp*Rf)
                    
                                Cf = mdl.prop(item_handle, "Cf")
                                mdl.set_property_value(Cf, cap)
                    
                            except ZeroDivisionError:
                                mdl.info("Filter resistor and capacitor cannot be set to zero.")
                                mdl.set_property_value(fp_prop, fp)
                                mdl.set_property_value(Rf_prop, Rf)
                    ENDCODE
                }
            }
            [
                position = 7568, 7968
                size = 64, 64
            ]

            component Subsystem Comparator {
                layout = static
                component src_ground gnd1 {
                }
                [
                    position = 8000, 8432
                ]

                component "xyce_lib/Ideal Resistor" R_OUT {
                    R = "2"
                }
                [
                    position = 8272, 8264
                    rotation = right
                    size = 64, 64
                ]

                component "xyce_lib/Ideal Resistor" R_VCC {
                    R = "1"
                }
                [
                    position = 8104, 8080
                    rotation = right
                    size = 64, 64
                ]

                component "xyce_lib/Voltage-Controlled Switch" Sw {
                    r_on = "2"
                }
                [
                    position = 8104, 8216
                    rotation = left
                    size = 64, 64
                ]

                component "core/Current Measurement" Ia1 {
                }
                [
                    position = 8104, 8320
                    rotation = right
                    size = 64, 32
                ]

                component "xyce_lib/Current-Controlled Voltage Source" H_VOUT {
                    transr = "4"
                }
                [
                    position = 8416, 8264
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/DC Voltage Source" V_VCC {
                    voltage = "3.3"
                }
                [
                    position = 7896, 8216
                    rotation = left
                    size = 64, 64
                ]

                port - {
                    position = -32.0, 20.0
                    kind = pe
                }
                [
                    position = 8016, 8256
                    hide_name = True
                ]

                port Out {
                    position = right center
                    kind = pe
                }
                [
                    position = 8504, 8144
                    rotation = down
                    hide_name = True
                ]

                port + {
                    position = -32.0, -20.0
                    kind = pe
                }
                [
                    position = 8016, 8176
                    hide_name = True
                ]

                junction Junction1 pe
                [
                    position = 8000, 8384
                ]

                junction Junction2 pe
                [
                    position = 8104, 8144
                ]

                junction Junction3 pe
                [
                    position = 8104, 8384
                ]

                junction Junction4 pe
                [
                    position = 8272, 8384
                ]

                connect - Sw.n_ctrl as Connection176
                connect + Sw.p_ctrl as Connection177
                connect Sw.p_node Ia1.p_node as Connection178
                connect V_VCC.p_node R_VCC.n_node as Connection181
                [
                    position = 0, 0
                    breakpoints = 7896, 8008; 8104, 8008
                ]
                connect gnd1.node Junction1 as Connection182
                connect Junction1 V_VCC.n_node as Connection183
                [
                    position = 0, 0
                    breakpoints = 8000, 8384; 7896, 8384
                ]
                connect R_VCC.p_node Junction2 as Connection185
                connect Junction2 Sw.n_node as Connection186
                connect R_OUT.n_node Junction2 as Connection187
                connect Ia1.n_node Junction3 as Connection188
                connect Junction3 Junction1 as Connection189
                connect Out H_VOUT.p_node as Connection191
                connect R_OUT.p_node Junction4 as Connection192
                connect Junction4 Junction3 as Connection193
                connect H_VOUT.n_node Junction4 as Connection194

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Comparator</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The comparator outputs the specified voltage magnitude. The polarity is determined by the sign of the diference between the non-inverting input and inverting input voltage values.</p></body></html>"

                    output_voltage {
                        label = "Output Voltage"
                        widget = edit
                        type = generic
                        default_value = "3.3"
                        unit = "V"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/op_amp.svg')
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7424, 7968
                size = 64, 64
            ]

            component Subsystem "Pulse Width Modulator" {
                layout = static
                component src_ground gnd1 {
                }
                [
                    position = 7920, 8336
                ]

                component "xyce_lib/Ideal Resistor" Rduty {
                    R = "1000"
                }
                [
                    position = 7920, 8200
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Pulse Voltage Source" "Pulse Voltage Source1" {
                    PER = "0"
                    PW = "0"
                    V1 = "0"
                }
                [
                    position = 8200, 8200
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Pulse Voltage Source" "Pulse Voltage Source2" {
                    PER = "0"
                    PW = "0"
                    V1 = "0"
                }
                [
                    position = 8440, 8208
                    rotation = left
                    size = 64, 64
                ]

                port Out {
                    position = 32.0, -20.0
                    kind = pe
                }
                [
                    position = 8288, 8112
                    rotation = down
                ]

                port duty {
                    position = left center
                    kind = pe
                }
                [
                    position = 7824, 8112
                ]

                port "Comp Out" {
                    position = 32.0, 20.0
                    kind = pe
                }
                [
                    position = 8528, 8112
                    rotation = down
                ]

                junction Junction1 pe
                [
                    position = 7920, 8296
                ]

                junction Junction2 pe
                [
                    position = 8200, 8296
                ]

                connect duty Rduty.p_node as Connection170
                [
                    position = 0, 0
                    breakpoints = 7920, 8112; 7912, 8112
                ]
                connect gnd1.node Junction1 as Connection173
                connect Junction1 Rduty.n_node as Connection174
                connect Out "Pulse Voltage Source1.p_node" as Connection176
                connect "Comp Out" "Pulse Voltage Source2.p_node" as Connection181
                connect "Pulse Voltage Source1.n_node" Junction2 as Connection182
                connect Junction2 Junction1 as Connection183
                [
                    position = 0, 0
                    breakpoints = 8048, 8296
                ]
                connect "Pulse Voltage Source2.n_node" Junction2 as Connection184

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Pulse Width Modulator</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Outputs complementary square-shaped waveforms from 0 V minimum voltage to the chosen maximum value.<br></br><br></br>The dead-time value is a percentage of the ouput waveform\'s period.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>The duty-cycle input accepts a voltage from 0 V to 1 V.</p></body></html>"

                    vmax {
                        label = "Output High-Voltage"
                        widget = edit
                        type = generic
                        default_value = "5"
                        unit = "V"
                    }

                    freq {
                        label = "Frequency"
                        widget = edit
                        type = generic
                        default_value = "1000"
                    }

                    deadtime {
                        label = "Dead-time"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "%"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/pwm.svg')
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7712, 7968
                size = 64, 64
            ]

            component Subsystem "Model-based OpAmp" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7896, 8040
                    rotation = down
                ]

                component el_short "Short Circuit1" {
                }
                [
                    position = 7896, 8112
                    rotation = down
                ]

                component el_short "Short Circuit2" {
                }
                [
                    position = 7896, 8176
                    rotation = down
                ]

                component el_short "Short Circuit3" {
                }
                [
                    position = 7896, 8248
                    rotation = down
                ]

                port p_node {
                    label = "-"
                    position = -32.0, 20.0
                    kind = pe
                }
                [
                    position = 8000, 8040
                    rotation = down
                    hide_name = True
                ]

                port n_node {
                    label = "+"
                    position = -32.0, -20.0
                    kind = pe
                }
                [
                    position = 7776, 8040
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                port p_node1 {
                    label = "VCC+"
                    position = top center
                    kind = pe
                }
                [
                    position = 8000, 8112
                    rotation = down
                    hide_name = True
                ]

                port p_node2 {
                    label = "VCC-"
                    position = bottom center
                    kind = pe
                }
                [
                    position = 8000, 8176
                    rotation = down
                    hide_name = True
                ]

                port p_node3 {
                    label = "Out"
                    position = right center
                    kind = pe
                }
                [
                    position = 8000, 8248
                    rotation = down
                    hide_name = True
                ]

                junction Junction1 pe
                [
                    position = 7816, 8040
                ]

                junction Junction2 pe
                [
                    position = 7816, 8112
                ]

                junction Junction3 pe
                [
                    position = 7816, 8176
                ]

                connect p_node "Short Circuit.p_node" as Connection1
                connect p_node1 "Short Circuit1.p_node" as Connection3
                connect "Short Circuit.n_node" Junction1 as Connection4
                connect Junction1 n_node as Connection5
                connect p_node2 "Short Circuit2.p_node" as Connection7
                connect p_node3 "Short Circuit3.p_node" as Connection8
                connect "Short Circuit1.n_node" Junction2 as Connection9
                connect Junction2 Junction1 as Connection10
                connect "Short Circuit2.n_node" Junction3 as Connection12
                connect Junction3 Junction2 as Connection13
                connect "Short Circuit3.n_node" Junction3 as Connection14

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Model-based OpAmp</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Requires the loading of library files. The loaded model must contain 5 terminals in the following order: non-inverting input -> inverting input -> VCC+ -> VCC- -> output.</p></body></html>"

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog
                        import os, sys, csv, io, re
                    
                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)
                    
                            def parse_file(self):
                                choose_file = QFileDialog()
                    
                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')
                    
                                if file:
                                    self.parse_models(file)
                                    return True
                                else:
                                    return False
                    
                            def parse_models(self, file):
                                model_list = []
                                subcircuit_model_list = []
                                # 5-pin OpAmps
                                num_pins = 5
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([ A-z0-9_]+)\s+(?:PARAMS)?",
                                                        flags = re.I)
                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            # Nested IFs in order to reduce the number of RegExes
                                            sub_match = re.match(sub_based, line)
                                            if sub_match:
                                                if len(sub_match.group(2).split()) == num_pins:
                                                    model_name = sub_match.group(1)
                                                    subcircuit_model_list.append(model_name)
                                                in_sub_flag  = True
                                        else:
                                            # Detect end of the subcircuit and update flag
                                            if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                in_sub_flag = False
                    
                                    mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), subcircuit_model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)
                    
                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()
                    
                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/op_amp_mb.svg')
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        # HEADER STOP
                        import builtins
                    
                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7872, 7968
                size = 64, 64
            ]
        }
        [
            position = 8320, 8200
            size = 96, 104
        ]

        component Category Special {
            layout = dynamic
            component Subsystem "Dynamic SPICE component" {
                layout = dynamic

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Dynamic SPICE component</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This component is able to load and identify subcircuits in a Xyce library file. The appropriate terminals are created automatically; the positions of the terminals, however, must be configured manually.<br></br><br></br>The selection of a new subcircuit must be confirmed to enable the configuration of the terminals.</p></body></html>"

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            update_component(mdl.get_parent(mdl.get_parent(prop_handle)))
                            mdl.refresh_icon(mdl.get_parent(mdl.get_parent(prop_handle)))
                        ENDCODE
                    }

                    show_netlist {
                        label = "View the netlist of the selected model"
                        widget = button
                        type = string
                        default_value = "Netlist"
                        no_evaluate

                        CODE button_clicked
                            view_netlist()
                        ENDCODE
                    }

                    configure_positions {
                        label = "Configure terminal positions"
                        widget = button
                        type = string
                        default_value = "Configure"
                        disabled
                        no_evaluate

                        CODE button_clicked
                            configuration_availability(mdl.get_parent(mdl.get_parent(prop_handle)))
                        ENDCODE
                    }

                    pin_positions {
                        label = "Pin positions"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    pin_idx {
                        label = "Pin indexes"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    pin_order {
                        label = "Pin order"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    selected_model {
                        label = "Selected model"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        nonvisible
                        no_evaluate
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                    
                    ENDCODE

                    CODE init
                        #abc
                        from PyQt5.QtWidgets import QWidget, QFileDialog, QDialog, QApplication
                        from PyQt5 import QtCore, QtGui, QtWidgets
                        import os, sys, csv, io, re
                    
                    
                        mdl.disable_property(mdl.prop(item_handle, "configure_positions"))
                    
                        models_pin_info = {}
                        positions = []
                    
                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)
                    
                            def parse_file(self):
                                choose_file = QFileDialog()
                    
                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')
                    
                                if file:
                                    self.parse_models(file)
                                    return True
                                else:
                                    return False
                    
                            def parse_models(self, file):
                                subcircuit_model_list = []
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([ A-z0-9_]+)\s+(?:PARAMS)?",
                                                        flags = re.I)
                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            sub_match = re.match(sub_based, line)
                                            if sub_match:
                                                # Enables when at least one match is found
                                                mdl.enable_property(mdl.prop(item_handle, "configure_positions"))
                                                mod_name = sub_match.group(1)
                                                subcircuit_model_list.append(mod_name)
                                                pin_list = sub_match.group(2).split()
                                                models_pin_info.update({mod_name:pin_list})
                                                in_sub_flag  = True
                                        else:
                                            # Detect end of the subcircuit and update flag
                                            if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                in_sub_flag = False
                    
                                    mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), subcircuit_model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)
                                    mdl.set_property_disp_value(mdl.prop(item_handle, "model_name"), subcircuit_model_list[0])
                    
                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()
                    
                        def parse_models_loadfile(item_handle):
                            file = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            selected_model = mdl.get_property_value(mdl.prop(item_handle, "selected_model"))
                            if not file == "-":
                                try:
                                    subcircuit_model_list = []
                                    # Find subcircuit-based models
                                    sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([ A-z0-9_]+)\s+(?:PARAMS)?",
                                                            flags = re.I)
                                    with io.open(file) as lib:
                                        in_sub_flag = False
                                        for line in lib:
                                            if not in_sub_flag:
                                                sub_match = re.match(sub_based, line)
                                                if sub_match:
                                                    # Enables when at least one match is found
                                                    mdl.enable_property(mdl.prop(item_handle, "configure_positions"))
                                                    mod_name = sub_match.group(1)
                                                    subcircuit_model_list.append(mod_name)
                                                    pin_list = sub_match.group(2).split()
                                                    models_pin_info.update({mod_name:pin_list})
                                                    in_sub_flag = True
                                            else:
                                                # Detect end of the subcircuit and update flag
                                                if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                    in_sub_flag = False
                    
                                except FileNotFoundError:
                                    mdl.disable_property(mdl.prop(item_handle, "configure_positions"))
                    
                                mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), subcircuit_model_list)
                    
                    
                                if selected_model in subcircuit_model_list:
                                   mdl.set_property_value(mdl.prop(item_handle, "pin_order"), ",".join(models_pin_info[selected_model]))
                                #mdl.info(mdl.get_property_value(mdl.prop(item_handle, "pin_order")))
                    
                        def update_component(item_handle):
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            selected_model = mdl.get_property_value(model_name_prop)
                            # component = mdl.get_item(name=mdl.get_fqn(item_handle).split(".")[0])
                            component = item_handle
                            # items = mdl.get_items(parent=component)
                    
                            items = mdl.get_items(item_handle)
                            # container_handle passes Category when opening library.
                            # This deletes all components inside the category
                            #if not str(item_handle)[0:13] == "mask: Special":
                            for it in items:
                                # Connections have no type attribute. Conns are deleted indirectly.
                                try:
                                    # Deal with junctions first
                                    if "Junction" in mdl.get_fqn(it):
                                        mdl.delete_item(it)
                                    mdl.delete_item(it)
                                except:
                                    pass
                    
                    
                            if not selected_model == "None":
                                mdl.set_property_value(mdl.prop(item_handle, "selected_model"), selected_model)
                                parse_models_loadfile(item_handle)
                                terminals = mdl.get_property_value(mdl.prop(item_handle,"pin_order")).split(",")
                                x0 = 8192
                                y0 = 8192
                                offset = -1000
                                count = 0
                                #### Terminals creation
                                for idx, term in enumerate(terminals):
                                    term_position = "left"
                                    # First time:
                                    positions.append(term_position)
                                    if idx == 0:
                                        first_port = mdl.create_port(
                                        name=term,
                                        parent=component,
                                        terminal_position=(term_position, "auto"),
                                        position=(x0-300, y0 + offset)
                                        )
                                        # Maintain pin position when file is saved
                                        pin_pos = mdl.get_property_value(mdl.prop(item_handle,"pin_positions")).split(",")
                                        pin_idxs = mdl.get_property_value(mdl.prop(item_handle,"pin_idx")).split(",")
                                        if not pin_pos == ["-"]:
                                            mdl.set_port_properties(first_port, terminal_position = (pin_pos[idx],int(pin_idxs[idx])))
                                        before_junc = mdl.create_junction(
                                        parent=component,
                                        position=(x0-200, y0 + offset)
                                        )
                                        mdl.create_connection(first_port, before_junc)
                                    else:
                                        port = mdl.create_port(
                                        name=term,
                                        parent=component,
                                        terminal_position=(term_position, "auto"),
                                        rotation="down",
                                        position=(x0, y0 + offset)
                                        )
                                        # Maintain pin position when file is saved
                                        pin_pos = mdl.get_property_value(mdl.prop(item_handle,"pin_positions")).split(",")
                                        pin_idxs = mdl.get_property_value(mdl.prop(item_handle,"pin_idx")).split(",")
                                        if not pin_pos == ["-"]:
                                            mdl.set_port_properties(port, terminal_position = (pin_pos[idx],int(pin_idxs[idx])))
                                        short = mdl.create_component(
                                        "core/Resistor",
                                        parent=component,
                                        position=(x0-100, y0 + offset)
                                        )
                                        junc = mdl.create_junction(
                                        parent=component,
                                        position=(x0-200, y0 + offset)
                                        )
                                        mdl.create_connection(port, mdl.term(short, "n_node"))
                                        mdl.create_connection(before_junc, junc)
                                        mdl.create_connection(junc, mdl.term(short, "p_node"))
                                        before_junc = junc
                                        offset += 75
                                    count += 1
                    
                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")
                    
                        # Terminal position configuration window
                        class Ui_TerminalPositions(object):
                            def setupUi(self, TerminalPositions):
                                TerminalPositions.setObjectName("TerminalPositions")
                                TerminalPositions.resize(380, 427)
                                TerminalPositions.setMinimumSize(QtCore.QSize(380, 427))
                                TerminalPositions.setMaximumSize(QtCore.QSize(380, 427))
                                self.buttonBox = QtWidgets.QDialogButtonBox(TerminalPositions)
                                self.buttonBox.setGeometry(QtCore.QRect(110, 390, 161, 32))
                                self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
                                self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
                                self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setText('Isso')
                                self.buttonBox.setObjectName("buttonBox")
                                self.groupBox = QtWidgets.QGroupBox(TerminalPositions)
                                self.groupBox.setGeometry(QtCore.QRect(10, 10, 361, 111))
                                self.groupBox.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
                                self.groupBox.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                                self.groupBox.setFlat(False)
                                self.groupBox.setCheckable(False)
                                self.groupBox.setObjectName("groupBox")
                                self.comboBox = QtWidgets.QComboBox(self.groupBox)
                                self.comboBox.setGeometry(QtCore.QRect(44, 60, 141, 22))
                                self.comboBox.setObjectName("comboBox")
                                self.label = QtWidgets.QLabel(self.groupBox)
                                self.label.setGeometry(QtCore.QRect(50, 40, 131, 20))
                                self.label.setAlignment(QtCore.Qt.AlignCenter)
                                self.label.setObjectName("label")
                                self.widget = QtWidgets.QWidget(self.groupBox)
                                self.widget.setGeometry(QtCore.QRect(240, 20, 81, 91))
                                self.widget.setMinimumSize(QtCore.QSize(81, 91))
                                self.widget.setMaximumSize(QtCore.QSize(81, 91))
                                self.widget.setObjectName("widget")
                                self.pushButton_left = QtWidgets.QPushButton(self.widget)
                                self.pushButton_left.setGeometry(QtCore.QRect(10, 40, 21, 21))
                                self.pushButton_left.setObjectName("pushButton_left")
                                self.pushButton_down = QtWidgets.QPushButton(self.widget)
                                self.pushButton_down.setGeometry(QtCore.QRect(30, 60, 21, 21))
                                self.pushButton_down.setObjectName("pushButton_down")
                                self.pushButton_up = QtWidgets.QPushButton(self.widget)
                                self.pushButton_up.setGeometry(QtCore.QRect(30, 20, 21, 21))
                                self.pushButton_up.setObjectName("pushButton_up")
                                self.label_3 = QtWidgets.QLabel(self.widget)
                                self.label_3.setGeometry(QtCore.QRect(10, 0, 61, 20))
                                self.label_3.setAlignment(QtCore.Qt.AlignCenter)
                                self.label_3.setObjectName("label_3")
                                self.label_cur_pos = QtWidgets.QLabel(self.widget)
                                self.label_cur_pos.setGeometry(QtCore.QRect(30, 40, 21, 21))
                                font = QtGui.QFont()
                                font.setBold(True)
                                font.setWeight(75)
                                self.label_cur_pos.setFont(font)
                                self.label_cur_pos.setText("")
                                self.label_cur_pos.setAlignment(QtCore.Qt.AlignCenter)
                                self.label_cur_pos.setObjectName("label_cur_pos")
                                self.pushButton_right = QtWidgets.QPushButton(self.widget)
                                self.pushButton_right.setGeometry(QtCore.QRect(50, 40, 21, 21))
                                self.pushButton_right.setObjectName("pushButton_right")
                                self.groupBox_2 = QtWidgets.QGroupBox(TerminalPositions)
                                self.groupBox_2.setGeometry(QtCore.QRect(10, 130, 361, 261))
                                self.groupBox_2.setObjectName("groupBox_2")
                                self.listWidget_up = QtWidgets.QListWidget(self.groupBox_2)
                                self.listWidget_up.setGeometry(QtCore.QRect(130, 30, 100, 90))
                                self.listWidget_up.setObjectName("listWidget_up")
                                self.listWidget_right = QtWidgets.QListWidget(self.groupBox_2)
                                self.listWidget_right.setGeometry(QtCore.QRect(240, 90, 100, 90))
                                self.listWidget_right.setObjectName("listWidget_right")
                                self.listWidget_down = QtWidgets.QListWidget(self.groupBox_2)
                                self.listWidget_down.setGeometry(QtCore.QRect(130, 140, 100, 90))
                                self.listWidget_down.setObjectName("listWidget_down")
                                self.listWidget_left = QtWidgets.QListWidget(self.groupBox_2)
                                self.listWidget_left.setGeometry(QtCore.QRect(20, 90, 100, 90))
                                self.listWidget_left.setObjectName("listWidget_left")
                                self.label_2 = QtWidgets.QLabel(self.groupBox_2)
                                self.label_2.setGeometry(QtCore.QRect(255, 220, 71, 20))
                                self.label_2.setAlignment(QtCore.Qt.AlignCenter)
                                self.label_2.setObjectName("label_2")
                                self.label_missing_terms = QtWidgets.QLabel(self.groupBox_2)
                                self.label_missing_terms.setGeometry(QtCore.QRect(10, 240, 191, 20))
                                self.label_missing_terms.setAlignment(QtCore.Qt.AlignCenter)
                                self.label_missing_terms.setObjectName("label_missing_terms")
                                self.toolButton_idx_up = QtWidgets.QToolButton(self.groupBox_2)
                                self.toolButton_idx_up.setGeometry(QtCore.QRect(330, 210, 21, 21))
                                self.toolButton_idx_up.setText("")
                                self.toolButton_idx_up.setObjectName("toolButton_idx_up")
                                self.toolButton_idx_down = QtWidgets.QToolButton(self.groupBox_2)
                                self.toolButton_idx_down.setGeometry(QtCore.QRect(330, 230, 21, 21))
                                self.toolButton_idx_down.setText("")
                                self.toolButton_idx_down.setObjectName("toolButton_idx_down")
                    
                                self.retranslateUi(TerminalPositions)
                                self.buttonBox.accepted.connect(TerminalPositions.accept)
                                self.buttonBox.rejected.connect(TerminalPositions.reject)
                                QtCore.QMetaObject.connectSlotsByName(TerminalPositions)
                    
                            def retranslateUi(self, TerminalPositions):
                                _translate = QtCore.QCoreApplication.translate
                                TerminalPositions.setWindowTitle(_translate("TerminalPositions", "Terminal positions configuration"))
                                self.groupBox.setTitle(_translate("TerminalPositions", "Configure positions for model"))
                                self.label.setText(_translate("TerminalPositions", "Terminal"))
                                self.pushButton_left.setText(_translate("TerminalPositions", "L"))
                                self.pushButton_down.setText(_translate("TerminalPositions", "D"))
                                self.pushButton_up.setText(_translate("TerminalPositions", "U"))
                                self.label_3.setText(_translate("TerminalPositions", "Position"))
                                self.pushButton_right.setText(_translate("TerminalPositions", "R"))
                                self.groupBox_2.setTitle(_translate("TerminalPositions", "New positions"))
                                self.label_2.setText(_translate("TerminalPositions", "Change index"))
                                self.label_missing_terms.setText(_translate("TerminalPositions", "Some terminals are not yet configured"))
                    
                        class TerminalPositionsDialog(QDialog, Ui_TerminalPositions):
                            def __init__(self):
                                super().__init__()
                                self.setupUi(self)
                                self.added_terminals = []
                    
                                # Some extra configs
                                self.toolButton_idx_up.setArrowType(QtCore.Qt.UpArrow)
                                self.toolButton_idx_down.setArrowType(QtCore.Qt.DownArrow)
                                self.label_missing_terms.setStyleSheet("color: red")
                    
                                # Must configure everything before OK is available
                                self.buttonBox.buttons()[0].setEnabled(False)
                    
                                # Connect button functions
                                self.pushButton_left.clicked.connect(self.add_to_list_left)
                                self.pushButton_right.clicked.connect(self.add_to_list_right)
                                self.pushButton_up.clicked.connect(self.add_to_list_up)
                                self.pushButton_down.clicked.connect(self.add_to_list_down)
                                self.toolButton_idx_up.clicked.connect(self.index_up)
                                self.toolButton_idx_down.clicked.connect(self.index_down)
                    
                                # Connect QListWidget clicks
                                self.listWidget_up.itemClicked.connect(self.clicked_on_list_up)
                                self.listWidget_down.itemClicked.connect(self.clicked_on_list_down)
                                self.listWidget_left.itemClicked.connect(self.clicked_on_list_left)
                                self.listWidget_right.itemClicked.connect(self.clicked_on_list_right)
                    
                            def test_ok_available(self, inlist):
                                if len(self.added_terminals) == self.comboBox.count():
                                    self.buttonBox.buttons()[0].setEnabled(True)
                                    self.label_missing_terms.setText("")
                                # For faster adding of Terminals
                                if not inlist:
                                    i = 1
                                    while i < self.comboBox.count():
                                        if not self.comboBox.currentText() in self.added_terminals:
                                            break
                                        else:
                                            self.comboBox.setCurrentIndex(i)
                                        i = i + 1
                    
                            def add_to_combo(self, terminals):
                                self.comboBox.addItems(terminals)
                    
                            def display_selected_model(self, model):
                                self.groupBox.setTitle("Configure positions for model " + model)
                    
                            def get_lists(self):
                                rg_left = range(self.listWidget_left.count())
                                left_list = [str(self.listWidget_left.item(i).text()) for i in rg_left]
                    
                                rg_right = range(self.listWidget_right.count())
                                right_list = [str(self.listWidget_right.item(i).text()) for i in rg_right]
                    
                                rg_up = range(self.listWidget_up.count())
                                up_list = [str(self.listWidget_up.item(i).text()) for i in rg_up]
                    
                                rg_down = range(self.listWidget_down.count())
                                down_list = [str(self.listWidget_down.item(i).text()) for i in rg_down]
                    
                                return {"left":left_list, "right":right_list,
                                                    "top":up_list, "bottom":down_list}
                    
                            def return_dict(self):
                                return self.get_lists()
                    
                            def in_list_check(self):
                    
                                terminal = self.comboBox.currentText()
                                lists = self.get_lists()
                                inlist = False
                    
                                for pos in lists:
                                    if terminal in lists[pos]:
                                        inlist = True
                                        # Cannot duplicate
                                        if pos == "left":
                                            item = self.listWidget_left.findItems(terminal, QtCore.Qt.MatchExactly)[0]
                                            row = self.listWidget_left.row(item)
                                            self.listWidget_left.takeItem(row)
                                        elif pos == "right":
                                            item = self.listWidget_right.findItems(terminal, QtCore.Qt.MatchExactly)[0]
                                            row = self.listWidget_right.row(item)
                                            self.listWidget_right.takeItem(row)
                                        elif pos == "top":
                                            item = self.listWidget_up.findItems(terminal, QtCore.Qt.MatchExactly)[0]
                                            row = self.listWidget_up.row(item)
                                            self.listWidget_up.takeItem(row)
                                        elif pos == "bottom":
                                            item = self.listWidget_down.findItems(terminal, QtCore.Qt.MatchExactly)[0]
                                            row = self.listWidget_down.row(item)
                                            self.listWidget_down.takeItem(row)
                    
                                return (terminal, inlist)
                    
                            def add_to_list_left(self, position):
                                terminal, inlist = self.in_list_check()
                                self.listWidget_left.addItem(terminal)
                                if terminal not in self.added_terminals:
                                    self.added_terminals.append(terminal)
                                self.test_ok_available(inlist)
                    
                            def add_to_list_right(self, position):
                                terminal, inlist = self.in_list_check()
                                self.listWidget_right.addItem(terminal)
                                if terminal not in self.added_terminals:
                                    self.added_terminals.append(terminal)
                                self.test_ok_available(inlist)
                    
                            def add_to_list_up(self, position):
                                terminal, inlist = self.in_list_check()
                                self.listWidget_up.addItem(terminal)
                                if terminal not in self.added_terminals:
                                    self.added_terminals.append(terminal)
                                self.test_ok_available(inlist)
                    
                            def add_to_list_down(self, position):
                                terminal, inlist = self.in_list_check()
                                self.listWidget_down.addItem(terminal)
                                if terminal not in self.added_terminals:
                                    self.added_terminals.append(terminal)
                                self.test_ok_available(inlist)
                    
                            def index_up(self):
                                selected_term = self.comboBox.currentText()
                                if self.listWidget_left.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_left
                                elif self.listWidget_right.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_right
                                elif self.listWidget_up.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_up
                                elif self.listWidget_down.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_down
                                currentRow = list_widget.currentRow()
                                currentItem = list_widget.takeItem(currentRow)
                                list_widget.insertItem(currentRow - 1, currentItem)
                                if currentRow - 1 >= 0:
                                    list_widget.setCurrentRow(currentRow - 1)
                                else:
                                    list_widget.setCurrentRow(0)
                    
                            def index_down(self):
                                selected_term = self.comboBox.currentText()
                                if self.listWidget_left.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_left
                                elif self.listWidget_right.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_right
                                elif self.listWidget_up.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_up
                                elif self.listWidget_down.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_down
                                currentRow = list_widget.currentRow()
                                currentItem = list_widget.takeItem(currentRow)
                                list_widget.insertItem(currentRow + 1, currentItem)
                                if currentRow + 1 < list_widget.count() - 1:
                                    list_widget.setCurrentRow(currentRow + 1)
                                else:
                                    list_widget.setCurrentRow(list_widget.count()-1)
                    
                            def clicked_on_list_left(self):
                                row = self.listWidget_left.currentRow()
                                term = self.listWidget_left.item(row).text()
                                idx = self.comboBox.findText(term, QtCore.Qt.MatchExactly)
                                self.comboBox.setCurrentIndex(idx)
                    
                            def clicked_on_list_right(self):
                                row = self.listWidget_right.currentRow()
                                term = self.listWidget_right.item(row).text()
                                idx = self.comboBox.findText(term, QtCore.Qt.MatchExactly)
                                self.comboBox.setCurrentIndex(idx)
                    
                            def clicked_on_list_up(self):
                                row = self.listWidget_up.currentRow()
                                term = self.listWidget_up.item(row).text()
                                idx = self.comboBox.findText(term, QtCore.Qt.MatchExactly)
                                self.comboBox.setCurrentIndex(idx)
                    
                            def clicked_on_list_down(self):
                                row = self.listWidget_down.currentRow()
                                term = self.listWidget_down.item(row).text()
                                idx = self.comboBox.findText(term, QtCore.Qt.MatchExactly)
                                self.comboBox.setCurrentIndex(idx)
                    
                        class Ui_ViewNetlist(object):
                            def setupUi(self, ViewNetlist):
                                ViewNetlist.setObjectName("ViewNetlist")
                                ViewNetlist.resize(800, 600)
                                self.gridLayout = QtWidgets.QGridLayout(ViewNetlist)
                                self.gridLayout.setObjectName("gridLayout")
                                self.textBrowser_netlist = QtWidgets.QTextBrowser(ViewNetlist)
                                self.textBrowser_netlist.setObjectName("textBrowser_netlist")
                                self.gridLayout.addWidget(self.textBrowser_netlist, 0, 0, 2, 1)
                                spacerItem = QtWidgets.QSpacerItem(20, 384, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
                                self.gridLayout.addItem(spacerItem, 1, 1, 1, 1)
                    
                                self.retranslateUi(ViewNetlist)
                                QtCore.QMetaObject.connectSlotsByName(ViewNetlist)
                    
                            def retranslateUi(self, ViewNetlist):
                                _translate = QtCore.QCoreApplication.translate
                                ViewNetlist.setWindowTitle(_translate("ViewNetlist", "View netlist"))
                    
                        class NetlistWindow(QDialog, Ui_ViewNetlist):
                            def __init__(self):
                                super().__init__()
                                self.setupUi(self)
                                self.show_netlist()
                    
                    
                            def show_netlist(self):
                                self.textBrowser_netlist.clear()
                                selected_model = mdl.get_property_disp_value(mdl.prop(item_handle, "model_name"))
                                self.textBrowser_netlist.append(f"""<body>
                                        <h3 style='color:black; margin: 2'>Showing netlist for model</h3>
                                        <h2 style='color:red; margin: 4'>{selected_model}</h2>
                                        </body>""")
                                self.textBrowser_netlist.setCurrentFont(QtGui.QFont("Courier New"))
                                for line in self.get_model_lines():
                                    self.textBrowser_netlist.append(line[:-1])
                                curs = self.textBrowser_netlist.textCursor()
                                self.textBrowser_netlist.moveCursor(QtGui.QTextCursor.Start)
                    
                            def get_model_lines(self):
                    
                                file = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                                selected_model = mdl.get_property_disp_value(mdl.prop(item_handle, "model_name"))
                    
                                regex_model = re.compile(fr"^\.SUBCKT {selected_model} ", flags = re.I)
                                model_lines = []
                    
                                try:
                                    with open(file) as lib:
                                        in_model_flag = False
                                        for line in lib:
                                            if not in_model_flag:
                                                mod_match = re.match(regex_model, line)
                                                if mod_match:
                                                    model_lines.append(line)
                                                    in_model_flag  = True
                                            else:
                                                # Detect end of the subcircuit and update flag
                                                if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                    model_lines.append(line)
                                                    in_model_flag = False
                                                else:
                                                    model_lines.append(line)
                    
                                    return model_lines
                    
                                except FileNotFoundError:
                                    mdl.info("Model file not found")
                                    return ["Model file not found."]
                    
                    
                        def configuration_availability(item_handle):
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            configure_prop = mdl.prop(item_handle, "configure_positions")
                            disp = mdl.get_property_disp_value(model_name_prop)
                            val = mdl.get_property_value(model_name_prop)
                            if val == disp:
                                configure_terminal_positions(item_handle)
                            else:
                                mdl.info("Please confirm of cancel the model change before configuring the terminal positions.")
                    
                        def configure_terminal_positions(item_handle):
                            pin_pos_dict = {}
                            pin_pos_list = []
                            pin_idx_list = []
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            selected_model = mdl.get_property_value(model_name_prop)
                            # Load pin information
                            terminals = mdl.get_property_value(mdl.prop(item_handle,"pin_order")).split(",")
                            conf = TerminalPositionsDialog()
                            # List available terminals in the ComboBox
                            conf.comboBox.addItems(terminals)
                            # Display the model being edited
                            conf.display_selected_model(str(selected_model))
                            # Run the GUI and get the new terminal positons
                            if conf.exec_():
                                new_term_positions = conf.return_dict()
                    
                                # Update terminal positions
                    
                                # Get all port handles
                                port_handles = []
                                # component = mdl.get_item(name=mdl.get_fqn(item_handle).split(".")[0])
                                # all_handles = mdl.get_items(component)
                                all_handles = mdl.get_items(item_handle)
                    
                                for h in all_handles:
                                    try:
                                        if h.item_type == "port":
                                            port_handles.append(h)
                                    except: pass
                    
                    
                                # Go through every terminal of the new_term_positions dict and compare
                                # to the each port name (in port_handles). If the name is the same, set
                                # the port position as the key of the dict (up, down, left, right)
                    
                                for key in new_term_positions:
                                    for term_name in new_term_positions[key]:
                                        for ph in port_handles:
                                            port_name = mdl.get_fqn(ph).split(".")[-1]
                                            if term_name == port_name:
                                                new_pos = (key, new_term_positions[key].index(term_name) + 1)
                                                mdl.set_port_properties(ph, terminal_position = new_pos)
                                                pin_pos_dict.update({term_name:(new_pos[0],str(new_pos[1]))})
                    
                            for term in terminals:
                                pin_pos_list.append(pin_pos_dict[term][0])
                                pin_idx_list.append(pin_pos_dict[term][1])
                    
                    
                            mdl.set_property_value(mdl.prop(item_handle, "pin_positions"), ",".join(pin_pos_list))
                            mdl.set_property_value(mdl.prop(item_handle, "pin_idx"), ",".join(pin_idx_list))
                    
                        def view_netlist():
                            netlistwindow = NetlistWindow()
                            netlistwindow.exec_()
                    
                    
                        parse_models_loadfile(item_handle)
                        #mdl.set_property_value(a)
                    ENDCODE

                    CODE define_icon
                        import builtins
                    
                        model_name_prop = mdl.prop(item_handle, "model_name")
                        model_name = mdl.get_property_value(model_name_prop)
                        model_path_prop = mdl.prop(item_handle, "model_path")
                        model_path = mdl.get_property_value(model_path_prop)
                    
                        try:
                            builtins.open(model_path)
                            if not model_name == "None":
                                 mdl.set_color(item_handle, "blue")
                                 mdl.disp_component_icon_text(item_handle, " " + model_name, relpos_x = 0.5, relpos_y = 0.5, size = 8)
                        except:
                            mdl.set_color(item_handle, "red")
                            mdl.disp_component_icon_text(item_handle, "Model", relpos_x = 0.5, relpos_y = 0.5, size = 8)
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        show_netlist = mdl.get_property_value(mdl.prop(item_handle, "show_netlist"))
                        configure_positions = mdl.get_property_value(mdl.prop(item_handle, "configure_positions"))
                        pin_positions = mdl.get_property_value(mdl.prop(item_handle, "pin_positions"))
                        pin_idx = mdl.get_property_value(mdl.prop(item_handle, "pin_idx"))
                        pin_order = mdl.get_property_value(mdl.prop(item_handle, "pin_order"))
                        selected_model = mdl.get_property_value(mdl.prop(item_handle, "selected_model"))
                        # HEADER STOP
                        import builtins
                    
                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7960, 8320
                size = 168, 136
            ]

            component Subsystem XyceSim {
                layout = dynamic

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Perform the simulation using the Xyce solver.</p></body></html>"

                    tse2xyce_path {
                        label = "Xyce converter folder"
                        widget = edit
                        type = generic
                        default_value = "path"
                        no_evaluate
                    }

                    sim_time {
                        label = "Simulation time"
                        widget = edit
                        type = generic
                        default_value = "0.04ms"
                        no_evaluate
                    }

                    max_ts {
                        label = "Maximum time-step"
                        widget = edit
                        type = generic
                        default_value = "1"
                        no_evaluate
                    }

                    start_sim {
                        widget = button
                        type = string
                        default_value = "Start simulation"
                        no_evaluate

                        CODE button_clicked
                            start_sim(container_handle)
                        ENDCODE
                    }

                    open_sa {
                        widget = button
                        type = string
                        default_value = "Plot"
                        no_evaluate

                        CODE button_clicked
                            open_sa()
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog, QDialog, QApplication
                        from PyQt5 import QtCore, QtGui, QtWidgets
                        import sys, os, re
                        
                        keep_open = {}
                        
                        def sim_with_xyce():
                        
                            sim_params_dict = {}
                        
                            sim_time = mdl.get_property_disp_value(mdl.prop(item_handle, "sim_time"))
                            max_ts = mdl.get_property_disp_value(mdl.prop(item_handle, "max_ts"))
                        
                            sim_params_dict['sim_time'] = sim_time
                            sim_params_dict['max_ts'] = max_ts
                        
                            # Export to JSON to the Target Files folder
                            mdl.export_model_to_json()
                        
                            # Get the path to the exported JSON
                            mdlfile = mdl.get_model_file_path()
                            mdlfile_name = mdlfile.split('\\')[-1].split('.')[0]
                            mdlfile_folder = '/'.join(mdlfile.split('\\')[0:-1])
                            mdlfile_target_folder = mdlfile_folder + '/' + mdlfile_name + ' Target files'
                            json_file_path = mdlfile_target_folder + '/' + mdlfile_name + '.json'
                        
                            # Xyce converter path
                            xycesim_path = mdl.get_property_disp_value(mdl.prop(item_handle, "tse2xyce_path"))
                        
                            if json_file_path:
                                os.chdir(xycesim_path)
                                sys.path.append(xycesim_path)
                                sys.path.append(xycesim_path+'/gui')
                                sys.path.append(xycesim_path+'/schematic_converter')
                                from minimalistic_gui import XyceOutput
                                import tse2xyce
                                mainwindow = XyceOutput(json_file_path, sim_params_dict)
                                mainwindow.show()
                                keep_open.update({'xycewin':mainwindow})
                        
                        def start_sim(item_handle):
                            sim_with_xyce()
                        
                        def open_sa():
                            if keep_open.get('xycewin'):
                                keep_open['xycewin'].plot_data()
                            else:
                                mdl.info('No plot data.')
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/xyce_logo.png')
                    ENDCODE

                    CODE pre_compile
                    ENDCODE

                    CODE post_resolve
                    ENDCODE
                }
            }
            [
                position = 7952, 8184
                size = 112, 56
            ]

            component Subsystem NodeID {
                layout = static
                component src_ground gnd1 {
                }
                [
                    position = 7848, 8096
                    rotation = left
                ]

                component el_open "Open Circuit1" {
                    circuit_connector = "true"
                }
                [
                    position = 7760, 8096
                    rotation = down
                ]

                port node {
                    position = left center
                    kind = pe
                }
                [
                    position = 7680, 8096
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                connect gnd1.node "Open Circuit1.p_node" as Connection1
                connect "Open Circuit1.n_node" node as Connection2

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Identify the wire/node in the circuit.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>Nodes with the same name become connected.</p></body></html>"

                    node_id {
                        label = "Node Identifier"
                        widget = edit
                        type = generic
                        default_value = "name"
                        no_evaluate
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/node_id.svg')
                    ENDCODE
                }
            }
            [
                position = 7800, 8328
                hide_name = True
                size = 16, 16
            ]
        }
        [
            position = 7872, 8208
            size = 96, 104
        ]
    }

    default {
    }
}
